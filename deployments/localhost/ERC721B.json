{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_NUMBER_OF_TOKENS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenExists",
      "outputs": [
        {
          "internalType": "bool[10000]",
          "name": "",
          "type": "bool[10000]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        }
      ],
      "name": "safeMintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0bae41210001608edf8aba1a8aaca8c40773ae8612f09add0a9fb4f8bd3368fb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "2796839",
    "logsBloom": "0x
    "blockHash": "0x76446cda077a48c7c40960014c526a8ac4047a316b584a98f2facff4951d4c22",
    "transactionHash": "0x0bae41210001608edf8aba1a8aaca8c40773ae8612f09add0a9fb4f8bd3368fb",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "2796839",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Dreamers",
    "DRE"
  ],
  "numDeployments": 1,
  "solcInputHash": "f37cb0314eabeddf27d6cd74dc77fd37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_OF_TOKENS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenExists\",\"outputs\":[{\"internalType\":\"bool[10000]\",\"name\":\"\",\"type\":\"bool[10000]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data      We use the uint16 / bytes2 tokenId\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"approve(address,uint256,uint256)\":{\"details\":\"Approve \\\"to\\\" to manage token Id\",\"params\":{\"to\":\"address The address which will manage the token Id\",\"tokenId\":\"uint256 The token Id to manage\",\"tokenIndex\":\"uint256 The index of the token in the owner's list\"}},\"balanceOf(address)\":{\"details\":\"There are two bytes per tokenId\",\"params\":{\"owner\":\"address The address we retrieve the balance for\"},\"returns\":{\"_0\":\"uint256 The number of tokens owned by the address\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getOwnerIndex(address)\":{\"details\":\"Returns the index of owner in the internal array of owners. Revert if not found.\",\"params\":{\"owner\":\"address The address we retrieve the index for\"},\"returns\":{\"_0\":\"uint256 The index of the owner in the internal owners array\"}},\"getTokenExists()\":{\"details\":\"Returns the array of bool telling if a token exists or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is an approved operator for the caller.\",\"params\":{\"operator\":\"The address of the operator to check.\",\"owner\":\"The address of the owner to check.\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.\",\"params\":{\"tokenId\":\"uint265 A given token id\"},\"returns\":{\"_0\":\"address The owner of the token.\"}},\"safeMintBatch(bytes)\":{\"details\":\"Add a batch of token Ids given as a bytes array to the sender\",\"params\":{\"tokenIds\":\"bytes a bytes of tokenIds as bytes2 (uint16)\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,uint256,address,uint256)\":{\"details\":\"Transfer token with minimal computing since all the required data to check is given\",\"params\":{\"from\":\"address The address which you want to transfer the token from\",\"fromIndex\":\"uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\",\"to\":\"address The address which you want to transfer the token to\",\"tokenIndex\":\"uint256 The index of the token to transfer in the from's token list.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\",\"params\":{\"_approved\":\"Whether to add or remove `operator` as an operator.\",\"operator\":\"The address of the operator to add or remove.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token optimized for batch minting\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/ERC721B.sol\":\"ERC721B\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/tokens/ERC721B.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token optimized for batch minting\\n * @notice a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data\\n *      We use the uint16 / bytes2 tokenId\\n */\\ncontract ERC721B is IERC721, IERC721Metadata, Context, ERC165 {\\n    using Address for address;\\n\\n    // Mapping from address to tokenIds. This is the single source of truth for the data\\n    mapping(address => bytes) internal _tokensByOwner;\\n\\n    // Because mapping in solidity are not real hash tables, one needs to keep track of the keys.\\n    // One address is 20 bytes\\n    bytes internal owners;\\n\\n    // Number of tokens\\n    uint16 public constant MAX_NUMBER_OF_TOKENS = 10_000;\\n\\n    // Bool array to store if the token is minted. To save on gas for token lookup in _tokensByOwner.\\n    bool[MAX_NUMBER_OF_TOKENS] public tokenExists;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint16 => address) internal _tokenApprovals;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev There are two bytes per tokenId\\n     * @param owner address The address we retrieve the balance for\\n     * @return uint256 The number of tokens owned by the address\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return _tokensByOwner[owner].length / 2;\\n    }\\n\\n    /// @dev Returns the balance of the owner at index ownerIndex in the internal owners array\\n    /// @param ownerIndex uint256 The index of the owner in the internal owners array\\n    /// @return uint256 The number of tokens owned by the address\\n    function _balanceOf(uint256 ownerIndex) internal view returns (uint256) {\\n        require(\\n            ownerIndex * 20 < owners.length,\\n            \\\"ERC721B: ownerIndex out of bound\\\"\\n        );\\n        return balanceOf(BytesLib.toAddress(owners, ownerIndex * 20));\\n    }\\n\\n    /// @dev Returns the index of owner in the internal array of owners. Revert if not found.\\n    /// @param owner address The address we retrieve the index for\\n    /// @return uint256 The index of the owner in the internal owners array\\n    function getOwnerIndex(address owner) external view returns (uint256) {\\n        uint256 index = 0;\\n        while (index < owners.length) {\\n            if (BytesLib.toAddress(owners, index) == owner) {\\n                return index / 20;\\n            }\\n            index += 20;\\n        }\\n        revert(\\\"ERC721B: Owner not found\\\");\\n    }\\n\\n    /// @dev Returns the array of bool telling if a token exists or not.\\n    function getTokenExists()\\n        external\\n        view\\n        returns (bool[MAX_NUMBER_OF_TOKENS] memory)\\n    {\\n        return tokenExists;\\n    }\\n\\n    /**\\n     * @param tokenId uint16 A given token id\\n     * @return bool True if the token exists, false otherwise\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenExists[tokenId];\\n    }\\n\\n    /**\\n     * @dev This is copied from OpenZeppelin's implementation\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721B: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev This is the core unsafe implementation of a transfer.\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function _transfer(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) private {\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        bytes memory tokenId = BytesLib.slice(\\n            _tokensByOwner[from],\\n            tokenIndex,\\n            tokenIndex + 2\\n        );\\n        if (_tokensByOwner[from].length == 2) {\\n            require(\\n                BytesLib.toAddress(owners, fromIndex * 20) == from,\\n                \\\"ERC721B: transfer from address is invalid\\\"\\n            );\\n            owners = bytes.concat(\\n                BytesLib.slice(owners, 0, fromIndex * 20),\\n                BytesLib.slice(\\n                    owners,\\n                    (fromIndex + 1) * 20,\\n                    owners.length - (fromIndex + 1) * 20\\n                )\\n            );\\n            delete _tokensByOwner[from];\\n        } else {\\n            _tokensByOwner[from] = bytes.concat(\\n                BytesLib.slice(_tokensByOwner[from], 0, tokenIndex),\\n                BytesLib.slice(\\n                    _tokensByOwner[from],\\n                    tokenIndex + 2,\\n                    _tokensByOwner[from].length - tokenIndex - 2\\n                )\\n            );\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenId);\\n        emit Transfer(from, to, BytesLib.toUint16(tokenId, 0));\\n    }\\n\\n    /// @dev Transfer token with minimal computing since all the required data to check is given\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function safeTransferFrom(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) external {\\n        require(from != address(0), \\\"ERC721B: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721B: to cannot be the zero address\\\");\\n        require(\\n            tokenIndex < _tokensByOwner[from].length / 2,\\n            \\\"ERC721B: token index out of range\\\"\\n        );\\n        uint16 tokenId = BytesLib.toUint16(\\n            _tokensByOwner[from],\\n            tokenIndex * 2\\n        );\\n        require(\\n            _isApproved(_msgSender(), tokenId) || from == _msgSender(),\\n            \\\"ERC721B: transfer caller is not owner nor approved\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev This is the core unsafe implementation of a mint.\\n     * @param to address The receiver of the tokens\\n     * @param tokenIds bytes The token ids to mint\\n     */\\n    function _mintBatch(address to, bytes calldata tokenIds) private {\\n        require(tokenIds.length > 0, \\\"ERC721B: cannot mint with no token Ids\\\");\\n        require(\\n            tokenIds.length % 2 == 0,\\n            \\\"ERC721B: tokenIds should be bytes of uint16\\\"\\n        );\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        for (uint256 i = 0; i < tokenIds.length; i += 2) {\\n            require(\\n                !tokenExists[BytesLib.toUint16(tokenIds, i)],\\n                \\\"ERC721B: token already exists\\\"\\n            );\\n            tokenExists[BytesLib.toUint16(tokenIds, i)] = true;\\n            emit Transfer(address(0), to, BytesLib.toUint16(tokenIds, i));\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenIds);\\n    }\\n\\n    /// @dev Add a batch of token Ids given as a bytes array to the sender\\n    /// @param tokenIds bytes a bytes of tokenIds as bytes2 (uint16)\\n    function safeMintBatch(bytes calldata tokenIds) public {\\n        _mintBatch(_msgSender(), tokenIds);\\n        _checkOnERC721Received(\\n            address(0),\\n            _msgSender(),\\n            BytesLib.toUint16(tokenIds, 0),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @dev Approve \\\"to\\\" to manage token Id\\n    /// @param to address The address which will manage the token Id\\n    /// @param tokenId uint256 The token Id to manage\\n    /// @param tokenIndex uint256 The index of the token in the owner's list\\n    function approve(\\n        address to,\\n        uint256 tokenId,\\n        uint256 tokenIndex\\n    ) external {\\n        if (_tokenApprovals[uint16(tokenId)] != _msgSender()) {\\n            // if sender is not approved, they need to be the owner\\n            require(\\n                tokenIndex * 2 < _tokensByOwner[_msgSender()].length,\\n                \\\"ERC721B: token index out of range\\\"\\n            );\\n            require(\\n                BytesLib.toUint16(\\n                    _tokensByOwner[_msgSender()],\\n                    tokenIndex * 2\\n                ) == tokenId,\\n                \\\"ERC721B: caller is neither approved nor owner\\\"\\n            );\\n            emit Approval(_msgSender(), to, tokenId);\\n        }\\n        _tokenApprovals[uint16(tokenId)] = to;\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(_exists(tokenId), \\\"ERC721B: token does not exist\\\");\\n        return _tokenApprovals[uint16(tokenId)];\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     * @param operator The address of the operator to add or remove.\\n     * @param _approved Whether to add or remove `operator` as an operator.\\n     */\\n    function setApprovalForAll(address operator, bool _approved)\\n        external\\n        override\\n    {\\n        require(\\n            operator != _msgSender(),\\n            \\\"ERC721B: cannot approve caller as operator\\\"\\n        );\\n        bytes memory tokens = _tokensByOwner[_msgSender()];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            _tokenApprovals[BytesLib.toUint16(tokens, i)] = _approved\\n                ? operator\\n                : address(0);\\n        }\\n\\n        emit ApprovalForAll(_msgSender(), operator, _approved);\\n    }\\n\\n    /**\\n     * @dev Returns whether `operator` is an approved operator for the caller.\\n     * @param owner The address of the owner to check.\\n     * @param operator The address of the operator to check.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        bytes memory tokens = _tokensByOwner[owner];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            if (_tokenApprovals[BytesLib.toUint16(tokens, i)] != operator) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev Overwrite this function to add some other approval logic, for instance for OpenSea.\\n    function _isApproved(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return getApproved(tokenId) == spender;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////\\n    // Functions that should not be used but here for compatibility with ERC721\\n    // These are gassy.\\n    ///////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        require(from != address(0), \\\"ERC721B: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721B: to cannot be the zero address\\\");\\n        require(\\n            _isApproved(_msgSender(), tokenId) || from == _msgSender(),\\n            \\\"ERC721B: transfer caller is not owner nor approved\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721B: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        if (_tokensByOwner[from].length == 2) {\\n            // A bit hacky but this is to avoid a useless computation for this gassy implementation\\n            for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n                if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                    break;\\n                }\\n            }\\n            require(\\n                BytesLib.toAddress(owners, fromIndex) == from,\\n                \\\"ERC721B: from is not in owners list\\\"\\n            );\\n        }\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override {\\n        _safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external override {\\n        _safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override {\\n        require(from != address(0), \\\"ERC721B: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721B: to cannot be the zero address\\\");\\n        require(\\n            _isApproved(_msgSender(), tokenId),\\n            \\\"ERC721B: transfer caller is not owner nor approved\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721B: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        if (_tokensByOwner[from].length == 2) {\\n            // A bit hacky but this is to avoid a useless computation for this gassy implementation\\n            for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n                if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                    break;\\n                }\\n            }\\n            require(\\n                BytesLib.toAddress(owners, fromIndex) == from,\\n                \\\"ERC721B: from is not in owners list\\\"\\n            );\\n        }\\n        _transfer(from, fromIndex, to, tokenIndex);\\n    }\\n\\n    /**\\n     * @dev Returns true of owner is the owner of the given token.\\n     *      This is much less gassy than using address == ownerOf(tokenId).\\n     * @param owner address The asserted owner\\n     * @param tokenId uint16 A given token id\\n     * @return bool True if the owner is truly the owner of the token\\n     */\\n    function _isOwnerOf(address owner, uint256 tokenId)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 j = 0; j < _tokensByOwner[owner].length; j += 2) {\\n            if (BytesLib.toUint16(_tokensByOwner[owner], j) == tokenId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev For each owner, we go through all their tokens and check if the sought token is in the list. This lookup\\n     *      is gassy but we do not expect to pay them often as we provide other mean of doing the transfers.\\n     * @param tokenId uint16 A given token id\\n     * @return address The owner of the token, might be 0x0 if not found\\n     */\\n    function _ownerOf(uint256 tokenId) private view returns (address) {\\n        address owner = address(0);\\n        for (uint256 i = 0; i < owners.length; i += 20) {\\n            address currentOwner = BytesLib.toAddress(owners, i);\\n            bool isOwner = _isOwnerOf(currentOwner, tokenId);\\n            if (isOwner) {\\n                owner = currentOwner;\\n                break;\\n            }\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good\\n     *      reason to call this function on chain.\\n     * @param tokenId uint265 A given token id\\n     * @return address The owner of the token.\\n     */\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721B: owner query for nonexistent token\\\");\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external override {\\n        address owner = _ownerOf(tokenId);\\n        require(\\n            owner != address(0),\\n            \\\"ERC721B: approve query for nonexistent token\\\"\\n        );\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == _msgSender() ||\\n                owner == _msgSender(),\\n            \\\"ERC721B: caller is not the owner nor an approved operator for the token\\\"\\n        );\\n        _tokenApprovals[uint16(tokenId)] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc84e1dbd37a1fdd84cb6e2ad370d63c366824b7cffa34a8c5b97b8de12a7cdcb\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003358380380620033588339810160408190526200003491620001dd565b81516200004a9061013c9060208501906200006a565b508051620000619061013d9060208401906200006a565b50505062000284565b828054620000789062000247565b90600052602060002090601f0160209004810192826200009c5760008555620000e7565b82601f10620000b757805160ff1916838001178555620000e7565b82800160010185558215620000e7579182015b82811115620000e7578251825591602001919060010190620000ca565b50620000f5929150620000f9565b5090565b5b80821115620000f55760008155600101620000fa565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013857600080fd5b81516001600160401b038082111562000155576200015562000110565b604051601f8301601f19908116603f0116810190828211818310171562000180576200018062000110565b816040528381526020925086838588010111156200019d57600080fd5b600091505b83821015620001c15785820183015181830184015290820190620001a2565b83821115620001d35760008385830101525b9695505050505050565b60008060408385031215620001f157600080fd5b82516001600160401b03808211156200020957600080fd5b620002178683870162000126565b935060208501519150808211156200022e57600080fd5b506200023d8582860162000126565b9150509250929050565b600181811c908216806200025c57607f821691505b602082108114156200027e57634e487b7160e01b600052602260045260246000fd5b50919050565b6130c480620002946000396000f3fe608060405234801561001057600080fd5b506004361061016b5760003560e01c806357fcd8c0116100cd5780639913fc6311610081578063b88d4fde11610066578063b88d4fde146102f2578063c87b56dd14610305578063e985e9c51461032657600080fd5b80639913fc63146102ca578063a22cb465146102df57600080fd5b806370a08231116100b257806370a082311461029c57806389c8af83146102af57806395d89b41146102c257600080fd5b806357fcd8c0146102765780636352211e1461028957600080fd5b8063095ea7b31161012457806325174f0e1161010957806325174f0e1461022f578063426a84931461025057806342842e0e1461026357600080fd5b8063095ea7b31461020757806323b872dd1461021c57600080fd5b80630216e304116101555780630216e304146101ab57806306fdde03146101c7578063081812fc146101dc57600080fd5b8062923f9e1461017057806301ffc9a714610198575b600080fd5b61018361017e3660046129d8565b610339565b60405190151581526020015b60405180910390f35b6101836101a6366004612a1f565b610364565b6101b461271081565b60405161ffff909116815260200161018f565b6101cf610449565b60405161018f9190612a94565b6101ef6101ea3660046129d8565b6104dc565b6040516001600160a01b03909116815260200161018f565b61021a610215366004612ac3565b610559565b005b61021a61022a366004612aed565b61071c565b61024261023d366004612b29565b610bac565b60405190815260200161018f565b61021a61025e366004612b44565b610c5b565b61021a610271366004612aed565b610eba565b61021a610284366004612b77565b610eda565b6101ef6102973660046129d8565b610f43565b6102426102aa366004612b29565b610fc9565b61021a6102bd366004612be9565b610ffb565b6101cf61125d565b6102d261126d565b60405161018f9190612c2d565b61021a6102ed366004612c63565b6112ca565b61021a610300366004612cb5565b6114a5565b6101cf6103133660046129d8565b5060408051602081019091526000815290565b610183610334366004612d91565b6114b7565b600281612710811061034a57600080fd5b60209182820401919006915054906101000a900460ff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806103f757507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061044357507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b606061013c805461045990612dc4565b80601f016020809104026020016040519081016040528092919081815260200182805461048590612dc4565b80156104d25780601f106104a7576101008083540402835291602001916104d2565b820191906000526020600020905b8154815290600101906020018083116104b557829003601f168201915b5050505050905090565b60006104e7826115cd565b6105385760405162461bcd60e51b815260206004820152601d60248201527f455243373231423a20746f6b656e20646f6573206e6f7420657869737400000060448201526064015b60405180910390fd5b5061ffff16600090815261013b60205260409020546001600160a01b031690565b6000610564826115ff565b90506001600160a01b0381166105e25760405162461bcd60e51b815260206004820152602c60248201527f455243373231423a20617070726f766520717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e0000000000000000000000000000000000000000606482015260840161052f565b61ffff8216600090815261013b60205260409020546001600160a01b031633148061061557506001600160a01b03811633145b6106ad5760405162461bcd60e51b815260206004820152604760248201527f455243373231423a2063616c6c6572206973206e6f7420746865206f776e657260448201527f206e6f7220616e20617070726f766564206f70657261746f7220666f7220746860648201527f6520746f6b656e00000000000000000000000000000000000000000000000000608482015260a40161052f565b61ffff8216600090815261013b6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6001600160a01b0383166107835760405162461bcd60e51b815260206004820152602860248201527f455243373231423a2066726f6d2063616e6e6f7420626520746865207a65726f604482015267206164647265737360c01b606482015260840161052f565b6001600160a01b0382166107e85760405162461bcd60e51b815260206004820152602660248201527f455243373231423a20746f2063616e6e6f7420626520746865207a65726f206160448201526564647265737360d01b606482015260840161052f565b6107f23382611666565b6108645760405162461bcd60e51b815260206004820152603260248201527f455243373231423a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000606482015260840161052f565b60005b6001600160a01b0384166000908152602081905260409020805483916109149161089090612dc4565b80601f01602080910402602001604051908101604052809291908181526020018280546108bc90612dc4565b80156109095780601f106108de57610100808354040283529160200191610909565b820191906000526020600020905b8154815290600101906020018083116108ec57829003601f168201915b50505050508361168c565b61ffff161415801561094957506001600160a01b0384166000908152602081905260409020805461094490612dc4565b905081105b1561096057610959600282612e15565b9050610867565b6001600160a01b0384166000908152602081905260409020805461098390612dc4565b905081106109f85760405162461bcd60e51b8152602060048201526024808201527f455243373231423a2066726f6d20646f6573206e6f74206f776e20746865207460448201527f6f6b656e00000000000000000000000000000000000000000000000000000000606482015260840161052f565b6001600160a01b03841660009081526020819052604081208054610a1b90612dc4565b905060021415610b99575060005b60018054610a3690612dc4565b9050811015610b0357846001600160a01b0316610add60018054610a5990612dc4565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8590612dc4565b8015610ad25780601f10610aa757610100808354040283529160200191610ad2565b820191906000526020600020905b815481529060010190602001808311610ab557829003601f168201915b5050505050836116f2565b6001600160a01b03161415610af157610b03565b610afc601482612e15565b9050610a29565b846001600160a01b0316610b1d60018054610a5990612dc4565b6001600160a01b031614610b995760405162461bcd60e51b815260206004820152602360248201527f455243373231423a2066726f6d206973206e6f7420696e206f776e657273206c60448201527f6973740000000000000000000000000000000000000000000000000000000000606482015260840161052f565b610ba585828685611768565b5050505050565b6000805b60018054610bbd90612dc4565b9050811015610c1357826001600160a01b0316610be060018054610a5990612dc4565b6001600160a01b03161415610c0157610bfa601482612e43565b9392505050565b610c0c601482612e15565b9050610bb0565b60405162461bcd60e51b815260206004820152601860248201527f455243373231423a204f776e6572206e6f7420666f756e640000000000000000604482015260640161052f565b61ffff8216600090815261013b60205260409020546001600160a01b03163314610e79573360009081526020819052604090208054610c9990612dc4565b9050610ca6826002612e57565b10610d195760405162461bcd60e51b815260206004820152602160248201527f455243373231423a20746f6b656e20696e646578206f7574206f662072616e6760448201527f6500000000000000000000000000000000000000000000000000000000000000606482015260840161052f565b33600090815260208190526040902080548391610dc991610d3990612dc4565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6590612dc4565b8015610db25780601f10610d8757610100808354040283529160200191610db2565b820191906000526020600020905b815481529060010190602001808311610d9557829003601f168201915b5050505050836002610dc49190612e57565b61168c565b61ffff1614610e405760405162461bcd60e51b815260206004820152602d60248201527f455243373231423a2063616c6c6572206973206e65697468657220617070726f60448201527f766564206e6f72206f776e657200000000000000000000000000000000000000606482015260840161052f565b60405182906001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590600090a45b5061ffff16600090815261013b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610ed583838360405180602001604052806000815250611e4e565b505050565b610ee53383836121f7565b610ed5600033610f2a85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250925061168c915050565b61ffff166040518060200160405280600081525061258b565b6000610f4e826115cd565b610fc05760405162461bcd60e51b815260206004820152602a60248201527f455243373231423a206f776e657220717565727920666f72206e6f6e6578697360448201527f74656e7420746f6b656e00000000000000000000000000000000000000000000606482015260840161052f565b610443826115ff565b6001600160a01b0381166000908152602081905260408120805460029190610ff090612dc4565b610443929150612e43565b6001600160a01b0384166110625760405162461bcd60e51b815260206004820152602860248201527f455243373231423a2066726f6d2063616e6e6f7420626520746865207a65726f604482015267206164647265737360c01b606482015260840161052f565b6001600160a01b0382166110c75760405162461bcd60e51b815260206004820152602660248201527f455243373231423a20746f2063616e6e6f7420626520746865207a65726f206160448201526564647265737360d01b606482015260840161052f565b6001600160a01b03841660009081526020819052604090208054600291906110ee90612dc4565b6110f9929150612e43565b811061116d5760405162461bcd60e51b815260206004820152602160248201527f455243373231423a20746f6b656e20696e646578206f7574206f662072616e6760448201527f6500000000000000000000000000000000000000000000000000000000000000606482015260840161052f565b6001600160a01b038416600090815260208190526040812080546111959190610d3990612dc4565b90506111a5338261ffff16611666565b806111b857506001600160a01b03851633145b61122a5760405162461bcd60e51b815260206004820152603260248201527f455243373231423a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000606482015260840161052f565b61123685858585611768565b61125585848361ffff166040518060200160405280600081525061258b565b505050505050565b606061013d805461045990612dc4565b6112756128e1565b604080516204e2008101918290529060029061271090826000855b825461010083900a900460ff1615158152602060019283018181049485019490930390920291018084116112905790505050505050905090565b6001600160a01b0382163314156113495760405162461bcd60e51b815260206004820152602a60248201527f455243373231423a2063616e6e6f7420617070726f76652063616c6c6572206160448201527f73206f70657261746f7200000000000000000000000000000000000000000000606482015260840161052f565b336000908152602081905260408120805461136390612dc4565b80601f016020809104026020016040519081016040528092919081815260200182805461138f90612dc4565b80156113dc5780601f106113b1576101008083540402835291602001916113dc565b820191906000526020600020905b8154815290600101906020018083116113bf57829003601f168201915b5050505050905060005b815181101561145d57826113fb5760006113fd565b835b61013b600061140c858561168c565b61ffff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611456600282612e15565b90506113e6565b5060405182151581526001600160a01b0384169033907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319060200160405180910390a3505050565b6114b184848484611e4e565b50505050565b6001600160a01b038216600090815260208190526040812080548291906114dd90612dc4565b80601f016020809104026020016040519081016040528092919081815260200182805461150990612dc4565b80156115565780601f1061152b57610100808354040283529160200191611556565b820191906000526020600020905b81548152906001019060200180831161153957829003601f168201915b5050505050905060005b81518110156115c257836001600160a01b031661013b6000611582858561168c565b61ffff1681526020810191909152604001600020546001600160a01b0316146115b057600092505050610443565b6115bb600282612e15565b9050611560565b506001949350505050565b600060028261271081106115e3576115e3612e94565b602081049091015460ff601f9092166101000a90041692915050565b600080805b6001805461161190612dc4565b905081101561165f57600061162c60018054610a5990612dc4565b9050600061163a8287612730565b9050801561164a5750915061165f565b506116589050601482612e15565b9050611604565b5092915050565b6000826001600160a01b031661167b836104dc565b6001600160a01b0316149392505050565b6000611699826002612e15565b835110156116e95760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e6473000000000000000000000000604482015260640161052f565b50016002015190565b60006116ff826014612e15565b8351101561174f5760405162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015260640161052f565b5001602001516c01000000000000000000000000900490565b6001600160a01b0382166000908152602081905260409020805461178b90612dc4565b151590506117d05760018260601b6040516020016117aa929190612f62565b604051602081830303815290604052600190805190602001906117ce929190612902565b505b6001600160a01b0384166000908152602081905260408120805461188991906117f890612dc4565b80601f016020809104026020016040519081016040528092919081815260200182805461182490612dc4565b80156118715780601f1061184657610100808354040283529160200191611871565b820191906000526020600020905b81548152906001019060200180831161185457829003601f168201915b5050505050838460026118849190612e15565b6127b9565b6001600160a01b03861660009081526020819052604090208054919250906118b090612dc4565b905060021415611bad57846001600160a01b0316611964600180546118d490612dc4565b80601f016020809104026020016040519081016040528092919081815260200182805461190090612dc4565b801561194d5780601f106119225761010080835404028352916020019161194d565b820191906000526020600020905b81548152906001019060200180831161193057829003601f168201915b505050505086601461195f9190612e57565b6116f2565b6001600160a01b0316146119e05760405162461bcd60e51b815260206004820152602960248201527f455243373231423a207472616e736665722066726f6d2061646472657373206960448201527f7320696e76616c69640000000000000000000000000000000000000000000000606482015260840161052f565b611a7d600180546119f090612dc4565b80601f0160208091040260200160405190810160405280929190818152602001828054611a1c90612dc4565b8015611a695780601f10611a3e57610100808354040283529160200191611a69565b820191906000526020600020905b815481529060010190602001808311611a4c57829003601f168201915b505050505060008660146118849190612e57565b611b5160018054611a8d90612dc4565b80601f0160208091040260200160405190810160405280929190818152602001828054611ab990612dc4565b8015611b065780601f10611adb57610100808354040283529160200191611b06565b820191906000526020600020905b815481529060010190602001808311611ae957829003601f168201915b5050505050866001611b189190612e15565b611b23906014612e57565b611b2e886001612e15565b611b39906014612e57565b60018054611b4690612dc4565b611884929150612f9f565b604051602001611b62929190612fb6565b60405160208183030381529060405260019080519060200190611b86929190612902565b506001600160a01b0385166000908152602081905260408120611ba891612986565b611d96565b6001600160a01b03851660009081526020819052604090208054611c5b9190611bd590612dc4565b80601f0160208091040260200160405190810160405280929190818152602001828054611c0190612dc4565b8015611c4e5780601f10611c2357610100808354040283529160200191611c4e565b820191906000526020600020905b815481529060010190602001808311611c3157829003601f168201915b50505050506000846127b9565b6001600160a01b03861660009081526020819052604090208054611d4b9190611c8390612dc4565b80601f0160208091040260200160405190810160405280929190818152602001828054611caf90612dc4565b8015611cfc5780601f10611cd157610100808354040283529160200191611cfc565b820191906000526020600020905b815481529060010190602001808311611cdf57829003601f168201915b5050505050846002611d0e9190612e15565b6001600160a01b038916600090815260208190526040902080546002918891611d3690612dc4565b611d41929150612f9f565b6118849190612f9f565b604051602001611d5c929190612fb6565b60408051601f198184030181529181526001600160a01b038716600090815260208181529190208251611d9493919290910190612902565b505b6001600160a01b038316600090815260208181526040918290209151611dbf9291849101612fe5565b60408051601f198184030181529181526001600160a01b038516600090815260208181529190208251611df793919290910190612902565b50611e0381600061168c565b61ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6001600160a01b038416611eb55760405162461bcd60e51b815260206004820152602860248201527f455243373231423a2066726f6d2063616e6e6f7420626520746865207a65726f604482015267206164647265737360c01b606482015260840161052f565b6001600160a01b038316611f1a5760405162461bcd60e51b815260206004820152602660248201527f455243373231423a20746f2063616e6e6f7420626520746865207a65726f206160448201526564647265737360d01b606482015260840161052f565b611f243383611666565b80611f3757506001600160a01b03841633145b611fa95760405162461bcd60e51b815260206004820152603260248201527f455243373231423a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000606482015260840161052f565b60005b6001600160a01b038516600090815260208190526040902080548491611fd59161089090612dc4565b61ffff161415801561200a57506001600160a01b0385166000908152602081905260409020805461200590612dc4565b905081105b156120215761201a600282612e15565b9050611fac565b6001600160a01b0385166000908152602081905260409020805461204490612dc4565b905081106120b95760405162461bcd60e51b8152602060048201526024808201527f455243373231423a2066726f6d20646f6573206e6f74206f776e20746865207460448201527f6f6b656e00000000000000000000000000000000000000000000000000000000606482015260840161052f565b6001600160a01b038516600090815260208190526040812080546120dc90612dc4565b9050600214156121d6575060005b600180546120f790612dc4565b905081101561214057856001600160a01b031661211a60018054610a5990612dc4565b6001600160a01b0316141561212e57612140565b612139601482612e15565b90506120ea565b856001600160a01b031661215a60018054610a5990612dc4565b6001600160a01b0316146121d65760405162461bcd60e51b815260206004820152602360248201527f455243373231423a2066726f6d206973206e6f7420696e206f776e657273206c60448201527f6973740000000000000000000000000000000000000000000000000000000000606482015260840161052f565b6121e286828785611768565b6121ee8686868661258b565b50505050505050565b8061226a5760405162461bcd60e51b815260206004820152602660248201527f455243373231423a2063616e6e6f74206d696e742077697468206e6f20746f6b60448201527f656e204964730000000000000000000000000000000000000000000000000000606482015260840161052f565b612275600282613001565b156122e85760405162461bcd60e51b815260206004820152602b60248201527f455243373231423a20746f6b656e4964732073686f756c64206265206279746560448201527f73206f662075696e743136000000000000000000000000000000000000000000606482015260840161052f565b6001600160a01b0383166000908152602081905260409020805461230b90612dc4565b151590506123505760018360601b60405160200161232a929190612f62565b6040516020818303038152906040526001908051906020019061234e929190612902565b505b60005b8181101561252757600261239e84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525086925061168c915050565b61ffff1661271081106123b3576123b3612e94565b602081049091015460ff601f9092166101000a900416156124165760405162461bcd60e51b815260206004820152601d60248201527f455243373231423a20746f6b656e20616c726561647920657869737473000000604482015260640161052f565b6001600261245b85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525087925061168c915050565b61ffff16612710811061247057612470612e94565b602091828204019190066101000a81548160ff0219169083151502179055506124d083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525085925061168c915050565b61ffff16846001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612520600282612e15565b9050612353565b506001600160a01b03831660009081526020818152604091829020915161255392918591859101613015565b60408051601f198184030181529181526001600160a01b0385166000908152602081815291902082516114b193919290910190612902565b60006001600160a01b0384163b156115c2576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906125e8903390899088908890600401613035565b602060405180830381600087803b15801561260257600080fd5b505af1925050508015612632575060408051601f3d908101601f1916820190925261262f91810190613071565b60015b6126e2573d808015612660576040519150601f19603f3d011682016040523d82523d6000602084013e612665565b606091505b5080516126da5760405162461bcd60e51b815260206004820152603360248201527f455243373231423a207472616e7366657220746f206e6f6e204552433732315260448201527f6563656976657220696d706c656d656e74657200000000000000000000000000606482015260840161052f565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050949350505050565b6000805b6001600160a01b0384166000908152602081905260409020805461275790612dc4565b90508110156127af576001600160a01b0384166000908152602081905260409020805484916127899161089090612dc4565b61ffff16141561279d576001915050610443565b6127a8600282612e15565b9050612734565b5060009392505050565b6060816127c781601f612e15565b10156128155760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015260640161052f565b61281f8284612e15565b8451101561286f5760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015260640161052f565b60608215801561288e57604051915060008252602082016040526128d8565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156128c75780518352602092830192016128af565b5050858452601f01601f1916604052505b50949350505050565b604051806204e2000160405280612710906020820280368337509192915050565b82805461290e90612dc4565b90600052602060002090601f0160209004810192826129305760008555612976565b82601f1061294957805160ff1916838001178555612976565b82800160010185558215612976579182015b8281111561297657825182559160200191906001019061295b565b506129829291506129c3565b5090565b50805461299290612dc4565b6000825580601f106129a2575050565b601f0160209004906000526020600020908101906129c091906129c3565b50565b5b8082111561298257600081556001016129c4565b6000602082840312156129ea57600080fd5b5035919050565b7fffffffff00000000000000000000000000000000000000000000000000000000811681146129c057600080fd5b600060208284031215612a3157600080fd5b8135610bfa816129f1565b60005b83811015612a57578181015183820152602001612a3f565b838111156114b15750506000910152565b60008151808452612a80816020860160208601612a3c565b601f01601f19169290920160200192915050565b602081526000610bfa6020830184612a68565b80356001600160a01b0381168114612abe57600080fd5b919050565b60008060408385031215612ad657600080fd5b612adf83612aa7565b946020939093013593505050565b600080600060608486031215612b0257600080fd5b612b0b84612aa7565b9250612b1960208501612aa7565b9150604084013590509250925092565b600060208284031215612b3b57600080fd5b610bfa82612aa7565b600080600060608486031215612b5957600080fd5b612b6284612aa7565b95602085013595506040909401359392505050565b60008060208385031215612b8a57600080fd5b823567ffffffffffffffff80821115612ba257600080fd5b818501915085601f830112612bb657600080fd5b813581811115612bc557600080fd5b866020828501011115612bd757600080fd5b60209290920196919550909350505050565b60008060008060808587031215612bff57600080fd5b612c0885612aa7565b935060208501359250612c1d60408601612aa7565b9396929550929360600135925050565b6204e2008101818360005b612710811015612c5a5781511515835260209283019290910190600101612c38565b50505092915050565b60008060408385031215612c7657600080fd5b612c7f83612aa7565b915060208301358015158114612c9457600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612ccb57600080fd5b612cd485612aa7565b9350612ce260208601612aa7565b925060408501359150606085013567ffffffffffffffff80821115612d0657600080fd5b818701915087601f830112612d1a57600080fd5b813581811115612d2c57612d2c612c9f565b604051601f8201601f19908116603f01168101908382118183101715612d5457612d54612c9f565b816040528281528a6020848701011115612d6d57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612da457600080fd5b612dad83612aa7565b9150612dbb60208401612aa7565b90509250929050565b600181811c90821680612dd857607f821691505b60208210811415612df957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612e2857612e28612dff565b500190565b634e487b7160e01b600052601260045260246000fd5b600082612e5257612e52612e2d565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612e8f57612e8f612dff565b500290565b634e487b7160e01b600052603260045260246000fd5b8054600090600181811c9080831680612ec457607f831692505b6020808410821415612ee657634e487b7160e01b600052602260045260246000fd5b818015612efa5760018114612f2957612f56565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650612f56565b60008881526020902060005b86811015612f4e5781548b820152908501908301612f35565b505084890196505b50505050505092915050565b6000612f6e8285612eaa565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009390931683525050601401919050565b600082821015612fb157612fb1612dff565b500390565b60008351612fc8818460208801612a3c565b835190830190612fdc818360208801612a3c565b01949350505050565b6000612ff18285612eaa565b8351612fdc818360208801612a3c565b60008261301057613010612e2d565b500690565b60006130218286612eaa565b838582376000930192835250909392505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526130676080830184612a68565b9695505050505050565b60006020828403121561308357600080fd5b8151610bfa816129f156fea2646970667358221220486bf0703051dd800631026b2d6114cf232bd4aa42cd0d164e3ebb87f2cd5e9f64736f6c63430008080033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "See https://eips.ethereum.org/EIPS/eip-721      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data      We use the uint16 / bytes2 tokenId",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "approve(address,uint256,uint256)": {
        "details": "Approve \"to\" to manage token Id",
        "params": {
          "to": "address The address which will manage the token Id",
          "tokenId": "uint256 The token Id to manage",
          "tokenIndex": "uint256 The index of the token in the owner's list"
        }
      },
      "balanceOf(address)": {
        "details": "There are two bytes per tokenId",
        "params": {
          "owner": "address The address we retrieve the balance for"
        },
        "returns": {
          "_0": "uint256 The number of tokens owned by the address"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getOwnerIndex(address)": {
        "details": "Returns the index of owner in the internal array of owners. Revert if not found.",
        "params": {
          "owner": "address The address we retrieve the index for"
        },
        "returns": {
          "_0": "uint256 The index of the owner in the internal owners array"
        }
      },
      "getTokenExists()": {
        "details": "Returns the array of bool telling if a token exists or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns whether `operator` is an approved operator for the caller.",
        "params": {
          "operator": "The address of the operator to check.",
          "owner": "The address of the owner to check."
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.",
        "params": {
          "tokenId": "uint265 A given token id"
        },
        "returns": {
          "_0": "address The owner of the token."
        }
      },
      "safeMintBatch(bytes)": {
        "details": "Add a batch of token Ids given as a bytes array to the sender",
        "params": {
          "tokenIds": "bytes a bytes of tokenIds as bytes2 (uint16)"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,uint256,address,uint256)": {
        "details": "Transfer token with minimal computing since all the required data to check is given",
        "params": {
          "from": "address The address which you want to transfer the token from",
          "fromIndex": "uint256 The index of \"from\" in the owners bytes. This is to avoid a search in the array.",
          "to": "address The address which you want to transfer the token to",
          "tokenIndex": "uint256 The index of the token to transfer in the from's token list."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.",
        "params": {
          "_approved": "Whether to add or remove `operator` as an operator.",
          "operator": "The address of the operator to add or remove."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "title": "ERC-721 Non-Fungible Token optimized for batch minting",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5747,
        "contract": "contracts/tokens/ERC721B.sol:ERC721B",
        "label": "_tokensByOwner",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 5749,
        "contract": "contracts/tokens/ERC721B.sol:ERC721B",
        "label": "owners",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 5756,
        "contract": "contracts/tokens/ERC721B.sol:ERC721B",
        "label": "tokenExists",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bool)10000_storage"
      },
      {
        "astId": 5760,
        "contract": "contracts/tokens/ERC721B.sol:ERC721B",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 5762,
        "contract": "contracts/tokens/ERC721B.sol:ERC721B",
        "label": "_name",
        "offset": 0,
        "slot": "316",
        "type": "t_string_storage"
      },
      {
        "astId": 5764,
        "contract": "contracts/tokens/ERC721B.sol:ERC721B",
        "label": "_symbol",
        "offset": 0,
        "slot": "317",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)10000_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[10000]",
        "numberOfBytes": "10016"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}