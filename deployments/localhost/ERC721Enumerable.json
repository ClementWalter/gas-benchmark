{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_NUMBER_OF_TOKENS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        }
      ],
      "name": "safeMintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4f82bafe90bcf75da4fc0cd992824bb4c3d0de9c0d345719cfeb1aa1872c607",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "2946510",
    "logsBloom": "0x
    "blockHash": "0x8e6b9415eb9b57e6058b806880b19cd7bbe628138b49d502a4e415b831c60be4",
    "transactionHash": "0xf4f82bafe90bcf75da4fc0cd992824bb4c3d0de9c0d345719cfeb1aa1872c607",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "2946510",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Dreamers",
    "DRE"
  ],
  "numDeployments": 1,
  "solcInputHash": "a7c864bcf77347ff937b613e6b177bf9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_OF_TOKENS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data      We use the uint16 / bytes2 tokenId\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"approve(address,uint256,uint256)\":{\"details\":\"Approve \\\"to\\\" to manage token Id\",\"params\":{\"to\":\"address The address which will manage the token Id\",\"tokenId\":\"uint256 The token Id to manage\",\"tokenIndex\":\"uint256 The index of the token in the owner's list\"}},\"balanceOf(address)\":{\"details\":\"There are two bytes per tokenId\",\"params\":{\"owner\":\"address The address we retrieve the balance for\"},\"returns\":{\"_0\":\"uint256 The number of tokens owned by the address\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getOwnerIndex(address)\":{\"details\":\"Returns the index of owner in the internal array of owners. Revert if not found.\",\"params\":{\"owner\":\"address The address we retrieve the index for\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is an approved operator for the caller.\",\"params\":{\"operator\":\"The address of the operator to check.\",\"owner\":\"The address of the owner to check.\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.\",\"params\":{\"tokenId\":\"uint265 A given token id\"},\"returns\":{\"_0\":\"address The owner of the token.\"}},\"safeMintBatch(bytes)\":{\"details\":\"Add a batch of token Ids given as a bytes array to the sender\",\"params\":{\"tokenIds\":\"bytes a bytes of tokenIds as bytes2 (uint16)\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,uint256,address,uint256)\":{\"details\":\"Transfer token with minimal computing since all the required data to check is given\",\"params\":{\"from\":\"address The address which you want to transfer the token from\",\"fromIndex\":\"uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\",\"to\":\"address The address which you want to transfer the token to\",\"tokenIndex\":\"uint256 The index of the token to transfer in the from's token list.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\",\"params\":{\"_approved\":\"Whether to add or remove `operator` as an operator.\",\"operator\":\"The address of the operator to add or remove.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token optimized for batch minting with enumerable interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/ERC721Enumerable.sol\":\"ERC721Enumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token optimized for batch minting\\n * @notice a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data\\n *      We use the uint16 / bytes2 tokenId\\n */\\ncontract ERC721 is IERC721, IERC721Metadata, Context, ERC165 {\\n    using Address for address;\\n\\n    // Mapping from address to tokenIds. This is the single source of truth for the data\\n    mapping(address => bytes) internal _tokensByOwner;\\n\\n    // Because mapping in solidity are not real hash tables, one needs to keep track of the keys.\\n    // One address is 20 bytes\\n    bytes internal owners;\\n\\n    // Number of tokens\\n    uint16 public constant MAX_NUMBER_OF_TOKENS = 10_000;\\n\\n    // Bool array to store if the token is minted. To save on gas for token lookup in _tokensByOwner.\\n    bool[MAX_NUMBER_OF_TOKENS] public tokenExists;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint16 => address) internal _tokenApprovals;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev There are two bytes per tokenId\\n     * @param owner address The address we retrieve the balance for\\n     * @return uint256 The number of tokens owned by the address\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return _tokensByOwner[owner].length / 2;\\n    }\\n\\n    function _balanceOf(uint256 ownerIndex) internal view returns (uint256) {\\n        require(ownerIndex < owners.length, \\\"ERC721: ownerIndex out of bound\\\");\\n        return balanceOf(BytesLib.toAddress(owners, ownerIndex));\\n    }\\n\\n    /// @dev Returns the index of owner in the internal array of owners. Revert if not found.\\n    /// @param owner address The address we retrieve the index for\\n    function getOwnerIndex(address owner) public view returns (uint256) {\\n        uint256 index = 0;\\n        while (index < owners.length) {\\n            if (BytesLib.toAddress(owners, index) == owner) {\\n                return index / 20;\\n            }\\n            index += 20;\\n        }\\n        revert(\\\"ERC721: Owner not found\\\");\\n    }\\n\\n    /**\\n     * @param tokenId uint16 A given token id\\n     * @return bool True if the token exists, false otherwise\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenExists[tokenId];\\n    }\\n\\n    /**\\n     * @dev This is copied from OpenZeppelin's implementation\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev This is the core unsafe implementation of a transfer.\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function _transfer(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) private {\\n        require(\\n            BytesLib.toAddress(owners, fromIndex * 20) == from,\\n            \\\"ERC721: transfer from address is invalid\\\"\\n        );\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        bytes memory tokenId = BytesLib.slice(\\n            _tokensByOwner[from],\\n            tokenIndex,\\n            tokenIndex + 2\\n        );\\n        if (_tokensByOwner[from].length == 2) {\\n            owners = bytes.concat(\\n                BytesLib.slice(owners, 0, fromIndex * 20),\\n                BytesLib.slice(\\n                    owners,\\n                    (fromIndex + 1) * 20,\\n                    owners.length - (fromIndex + 1) * 20\\n                )\\n            );\\n            delete _tokensByOwner[from];\\n        } else {\\n            _tokensByOwner[from] = bytes.concat(\\n                BytesLib.slice(_tokensByOwner[from], 0, tokenIndex),\\n                BytesLib.slice(\\n                    _tokensByOwner[from],\\n                    tokenIndex + 2,\\n                    _tokensByOwner[from].length - tokenIndex - 2\\n                )\\n            );\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenId);\\n    }\\n\\n    /// @dev Transfer token with minimal computing since all the required data to check is given\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function safeTransferFrom(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) external {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            tokenIndex < _tokensByOwner[from].length / 2,\\n            \\\"ERC721: token index out of range\\\"\\n        );\\n        uint16 tokenId = BytesLib.toUint16(\\n            _tokensByOwner[from],\\n            tokenIndex * 2\\n        );\\n        require(\\n            _tokenApprovals[tokenId] == msg.sender || from == msg.sender,\\n            \\\"ERC721: caller is neither approved nor owner\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, \\\"\\\");\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev This is the core unsafe implementation of a mint.\\n     * @param to address The receiver of the tokens\\n     * @param tokenIds bytes The token ids to mint\\n     */\\n    function _mintBatch(address to, bytes calldata tokenIds) private {\\n        require(tokenIds.length > 0, \\\"ERC721: cannot mint with no token Ids\\\");\\n        require(\\n            tokenIds.length % 2 == 0,\\n            \\\"ERC721: tokenIds should be bytes of uint16\\\"\\n        );\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        for (uint256 i = 0; i < tokenIds.length; i += 2) {\\n            require(\\n                !tokenExists[BytesLib.toUint16(tokenIds, i)],\\n                \\\"ERC721: token already exists\\\"\\n            );\\n            tokenExists[BytesLib.toUint16(tokenIds, i)] = true;\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenIds);\\n    }\\n\\n    /// @dev Add a batch of token Ids given as a bytes array to the sender\\n    /// @param tokenIds bytes a bytes of tokenIds as bytes2 (uint16)\\n    function safeMintBatch(bytes calldata tokenIds) public {\\n        _mintBatch(msg.sender, tokenIds);\\n        _checkOnERC721Received(\\n            address(0),\\n            msg.sender,\\n            BytesLib.toUint16(tokenIds, 0),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @dev Approve \\\"to\\\" to manage token Id\\n    /// @param to address The address which will manage the token Id\\n    /// @param tokenId uint256 The token Id to manage\\n    /// @param tokenIndex uint256 The index of the token in the owner's list\\n    function approve(\\n        address to,\\n        uint256 tokenId,\\n        uint256 tokenIndex\\n    ) external {\\n        if (_tokenApprovals[uint16(tokenId)] != msg.sender) {\\n            // if sender is not approved, they need to be the owner\\n            require(\\n                tokenIndex * 2 < _tokensByOwner[msg.sender].length,\\n                \\\"ERC721: token index out of range\\\"\\n            );\\n            require(\\n                BytesLib.toUint16(_tokensByOwner[msg.sender], tokenIndex * 2) ==\\n                    tokenId,\\n                \\\"ERC721: caller is neither approved nor owner\\\"\\n            );\\n        }\\n        _tokenApprovals[uint16(tokenId)] = to;\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(_exists(tokenId), \\\"ERC721: token does not exist\\\");\\n        return _tokenApprovals[uint16(tokenId)];\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     * @param operator The address of the operator to add or remove.\\n     * @param _approved Whether to add or remove `operator` as an operator.\\n     */\\n    function setApprovalForAll(address operator, bool _approved)\\n        external\\n        override\\n    {\\n        require(\\n            operator != msg.sender,\\n            \\\"ERC721: cannot approve caller as operator\\\"\\n        );\\n        bytes memory tokens = _tokensByOwner[msg.sender];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            _tokenApprovals[BytesLib.toUint16(tokens, i)] = _approved\\n                ? operator\\n                : address(0);\\n        }\\n\\n        emit ApprovalForAll(msg.sender, operator, _approved);\\n    }\\n\\n    /**\\n     * @dev Returns whether `operator` is an approved operator for the caller.\\n     * @param owner The address of the owner to check.\\n     * @param operator The address of the operator to check.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        bytes memory tokens = _tokensByOwner[owner];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            if (_tokenApprovals[BytesLib.toUint16(tokens, i)] != operator) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////\\n    // Functions that should not be used but here for compatibility with ERC721\\n    // These are gassy.\\n    ///////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == msg.sender ||\\n                from == msg.sender,\\n            \\\"ERC721: caller is not approved for all tokens\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n            if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                break;\\n            }\\n        }\\n        require(\\n            BytesLib.toAddress(owners, fromIndex) == from,\\n            \\\"ERC721: from is not in owners list\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override {\\n        safeTransferFrom(from, to, tokenId, bytes(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override {\\n        require(from != address(0), \\\"ERC721: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721: to cannot be the zero address\\\");\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == msg.sender ||\\n                from == msg.sender,\\n            \\\"ERC721: caller is not approved for all tokens\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n            if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                break;\\n            }\\n        }\\n        require(\\n            BytesLib.toAddress(owners, fromIndex) == from,\\n            \\\"ERC721: from is not in owners list\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev For each owner, we go through all their tokens and check if the sought token is in the list. This lookup\\n     *      is gassy but we do not expect to pay them often as we provide other mean of doing the transfers.\\n     * @param tokenId uint16 A given token id\\n     * @return address The owner of the token, might be 0x0 if not found\\n     */\\n    function _ownerOf(uint256 tokenId) private view returns (address) {\\n        address owner = address(0);\\n        for (uint256 i = 0; i < owners.length; i += 20) {\\n            address currentOwner = BytesLib.toAddress(owners, i);\\n            for (\\n                uint256 j = 0;\\n                j < _tokensByOwner[currentOwner].length;\\n                j += 2\\n            ) {\\n                if (\\n                    BytesLib.toUint16(_tokensByOwner[currentOwner], j) ==\\n                    tokenId\\n                ) {\\n                    owner = currentOwner;\\n                    break;\\n                }\\n            }\\n            if (owner != address(0)) {\\n                break;\\n            }\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good\\n     *      reason to call this function on chain.\\n     * @param tokenId uint265 A given token id\\n     * @return address The owner of the token.\\n     */\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: owner query for nonexistent token\\\");\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external override {\\n        address owner = _ownerOf(tokenId);\\n        require(\\n            owner != address(0),\\n            \\\"ERC721: approve query for nonexistent token\\\"\\n        );\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == msg.sender ||\\n                owner == msg.sender,\\n            \\\"ERC721: caller is not the owner nor an approved operator for the token\\\"\\n        );\\n        _tokenApprovals[uint16(tokenId)] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xb35f0891327cb14a1089691e9a05dbc8c4c3de2679e43f0d022aa3b8d520e8e4\",\"license\":\"MIT\"},\"contracts/tokens/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC721} from \\\"./ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token optimized for batch minting with enumerable interface\\n * @notice a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data\\n *      We use the uint16 / bytes2 tokenId\\n */\\ncontract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    function totalSupply() external view override returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < owners.length; i += 20) {\\n            total += _balanceOf(i);\\n        }\\n        return total;\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override\\n        returns (uint256 tokenId)\\n    {\\n        require(\\n            index * 2 < _tokensByOwner[owner].length,\\n            \\\"ERC721Enumerable: index out of range\\\"\\n        );\\n        return BytesLib.toUint16(_tokensByOwner[owner], index * 2);\\n    }\\n\\n    function tokenByIndex(uint256 index)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 ownerIndex = 0;\\n        uint256 count;\\n        while (count <= index) {\\n            count += _balanceOf(ownerIndex);\\n            ownerIndex += 20;\\n        }\\n        ownerIndex -= 20;\\n        count -= _balanceOf(ownerIndex);\\n        return\\n            BytesLib.toUint16(\\n                _tokensByOwner[BytesLib.toAddress(owners, ownerIndex)],\\n                (index - count) * 2\\n            );\\n    }\\n\\n    constructor(string memory name_, string memory symbol_)\\n        ERC721(name_, symbol_)\\n    {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC721)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x333e9f46f7428df7bb6db48bd644906c5877c5bfb0bb6ba28083b49fd9411c8b\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003615380380620036158339810160408190526200003491620001e3565b8151829082906200004e9061013c90602085019062000070565b508051620000659061013d90602084019062000070565b50505050506200028a565b8280546200007e906200024d565b90600052602060002090601f016020900481019282620000a25760008555620000ed565b82601f10620000bd57805160ff1916838001178555620000ed565b82800160010185558215620000ed579182015b82811115620000ed578251825591602001919060010190620000d0565b50620000fb929150620000ff565b5090565b5b80821115620000fb576000815560010162000100565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013e57600080fd5b81516001600160401b03808211156200015b576200015b62000116565b604051601f8301601f19908116603f0116810190828211818310171562000186576200018662000116565b81604052838152602092508683858801011115620001a357600080fd5b600091505b83821015620001c75785820183015181830184015290820190620001a8565b83821115620001d95760008385830101525b9695505050505050565b60008060408385031215620001f757600080fd5b82516001600160401b03808211156200020f57600080fd5b6200021d868387016200012c565b935060208501519150808211156200023457600080fd5b5062000243858286016200012c565b9150509250929050565b600181811c908216806200026257607f821691505b602082108114156200028457634e487b7160e01b600052602260045260246000fd5b50919050565b61337b806200029a6000396000f3fe608060405234801561001057600080fd5b50600436106101815760003560e01c806342842e0e116100d857806389c8af831161008c578063b88d4fde11610066578063b88d4fde14610321578063c87b56dd14610334578063e985e9c51461035557600080fd5b806389c8af83146102f357806395d89b4114610306578063a22cb4651461030e57600080fd5b806357fcd8c0116100bd57806357fcd8c0146102ba5780636352211e146102cd57806370a08231146102e057600080fd5b806342842e0e146102945780634f6ccce7146102a757600080fd5b8063095ea7b31161013a57806325174f0e1161011457806325174f0e1461025b5780632f745c591461026e578063426a84931461028157600080fd5b8063095ea7b31461021d57806318160ddd1461023257806323b872dd1461024857600080fd5b80630216e3041161016b5780630216e304146101c157806306fdde03146101dd578063081812fc146101f257600080fd5b8062923f9e1461018657806301ffc9a7146101ae575b600080fd5b610199610194366004612ccb565b610368565b60405190151581526020015b60405180910390f35b6101996101bc366004612d12565b610393565b6101ca61271081565b60405161ffff90911681526020016101a5565b6101e56103ef565b6040516101a59190612d87565b610205610200366004612ccb565b610482565b6040516001600160a01b0390911681526020016101a5565b61023061022b366004612db6565b6104ff565b005b61023a6106c2565b6040519081526020016101a5565b610230610256366004612de0565b61070a565b61023a610269366004612e1c565b610bd5565b61023a61027c366004612db6565b610c84565b61023061028f366004612e37565b610de9565b6102306102a2366004612de0565b610f59565b61023a6102b5366004612ccb565b610f79565b6102306102c8366004612e6a565b611134565b6102056102db366004612ccb565b61119d565b61023a6102ee366004612e1c565b611223565b610230610301366004612edc565b611255565b6101e56114e7565b61023061031c366004612f20565b6114f7565b61023061032f366004612f72565b6116d2565b6101e5610342366004612ccb565b5060408051602081019091526000815290565b61019961036336600461304e565b611aa3565b600281612710811061037957600080fd5b60209182820401919006915054906101000a900460ff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806103e957506103e982611bb9565b92915050565b606061013c80546103ff90613081565b80601f016020809104026020016040519081016040528092919081815260200182805461042b90613081565b80156104785780601f1061044d57610100808354040283529160200191610478565b820191906000526020600020905b81548152906001019060200180831161045b57829003601f168201915b5050505050905090565b600061048d82611c9c565b6104de5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20646f6573206e6f742065786973740000000060448201526064015b60405180910390fd5b5061ffff16600090815261013b60205260409020546001600160a01b031690565b600061050a82611cce565b90506001600160a01b0381166105885760405162461bcd60e51b815260206004820152602b60248201527f4552433732313a20617070726f766520717565727920666f72206e6f6e65786960448201527f7374656e7420746f6b656e00000000000000000000000000000000000000000060648201526084016104d5565b61ffff8216600090815261013b60205260409020546001600160a01b03163314806105bb57506001600160a01b03811633145b6106535760405162461bcd60e51b815260206004820152604660248201527f4552433732313a2063616c6c6572206973206e6f7420746865206f776e65722060448201527f6e6f7220616e20617070726f766564206f70657261746f7220666f722074686560648201527f20746f6b656e0000000000000000000000000000000000000000000000000000608482015260a4016104d5565b61ffff8216600090815261013b6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600080805b600180546106d490613081565b9050811015610704576106e681611da9565b6106f090836130cc565b91506106fd6014826130cc565b90506106c7565b50919050565b6001600160a01b0383166107705760405162461bcd60e51b815260206004820152602760248201527f4552433732313a2066726f6d2063616e6e6f7420626520746865207a65726f206044820152666164647265737360c81b60648201526084016104d5565b6001600160a01b0382166107d45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a20746f2063616e6e6f7420626520746865207a65726f206164604482015264647265737360d81b60648201526084016104d5565b61ffff8116600090815261013b60205260409020546001600160a01b031633148061080757506001600160a01b03831633145b6108795760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420617070726f766564206660448201527f6f7220616c6c20746f6b656e730000000000000000000000000000000000000060648201526084016104d5565b60005b6001600160a01b038416600090815260208190526040902080548391610929916108a590613081565b80601f01602080910402602001604051908101604052809291908181526020018280546108d190613081565b801561091e5780601f106108f35761010080835404028352916020019161091e565b820191906000526020600020905b81548152906001019060200180831161090157829003601f168201915b505050505083611e9f565b61ffff161415801561095e57506001600160a01b0384166000908152602081905260409020805461095990613081565b905081105b156109755761096e6002826130cc565b905061087c565b6001600160a01b0384166000908152602081905260409020805461099890613081565b90508110610a0e5760405162461bcd60e51b815260206004820152602360248201527f4552433732313a2066726f6d20646f6573206e6f74206f776e2074686520746f60448201527f6b656e000000000000000000000000000000000000000000000000000000000060648201526084016104d5565b60005b60018054610a1e90613081565b9050811015610aeb57846001600160a01b0316610ac560018054610a4190613081565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6d90613081565b8015610aba5780601f10610a8f57610100808354040283529160200191610aba565b820191906000526020600020905b815481529060010190602001808311610a9d57829003601f168201915b505050505083611f05565b6001600160a01b03161415610ad957610aeb565b610ae46014826130cc565b9050610a11565b846001600160a01b0316610b0560018054610a4190613081565b6001600160a01b031614610b815760405162461bcd60e51b815260206004820152602260248201527f4552433732313a2066726f6d206973206e6f7420696e206f776e657273206c6960448201527f737400000000000000000000000000000000000000000000000000000000000060648201526084016104d5565b610b8d85828685611f7b565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6000805b60018054610be690613081565b9050811015610c3c57826001600160a01b0316610c0960018054610a4190613081565b6001600160a01b03161415610c2a57610c236014826130fa565b9392505050565b610c356014826130cc565b9050610bd9565b60405162461bcd60e51b815260206004820152601760248201527f4552433732313a204f776e6572206e6f7420666f756e6400000000000000000060448201526064016104d5565b6001600160a01b03821660009081526020819052604081208054610ca790613081565b9050610cb483600261310e565b10610d265760405162461bcd60e51b8152602060048201526024808201527f455243373231456e756d657261626c653a20696e646578206f7574206f66207260448201527f616e67650000000000000000000000000000000000000000000000000000000060648201526084016104d5565b6001600160a01b03831660009081526020819052604090208054610dde9190610d4e90613081565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7a90613081565b8015610dc75780601f10610d9c57610100808354040283529160200191610dc7565b820191906000526020600020905b815481529060010190602001808311610daa57829003601f168201915b5050505050836002610dd9919061310e565b611e9f565b61ffff169392505050565b61ffff8216600090815261013b60205260409020546001600160a01b03163314610f18573360009081526020819052604090208054610e2790613081565b9050610e3482600261310e565b10610e815760405162461bcd60e51b815260206004820181905260248201527f4552433732313a20746f6b656e20696e646578206f7574206f662072616e676560448201526064016104d5565b33600090815260208190526040902080548391610ea191610d4e90613081565b61ffff1614610f185760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a2063616c6c6572206973206e65697468657220617070726f7660448201527f6564206e6f72206f776e6572000000000000000000000000000000000000000060648201526084016104d5565b5061ffff16600090815261013b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610f74838383604051806020016040528060008152506116d2565b505050565b600080805b838111610fac57610f8e82611da9565b610f9890826130cc565b9050610fa56014836130cc565b9150610f7e565b610fb760148361314b565b9150610fc282611da9565b610fcc908261314b565b905061112860008061106860018054610fe490613081565b80601f016020809104026020016040519081016040528092919081815260200182805461101090613081565b801561105d5780601f106110325761010080835404028352916020019161105d565b820191906000526020600020905b81548152906001019060200180831161104057829003601f168201915b505050505086611f05565b6001600160a01b03166001600160a01b03168152602001908152602001600020805461109390613081565b80601f01602080910402602001604051908101604052809291908181526020018280546110bf90613081565b801561110c5780601f106110e15761010080835404028352916020019161110c565b820191906000526020600020905b8154815290600101906020018083116110ef57829003601f168201915b5050505050828661111d919061314b565b610dd990600261310e565b61ffff16949350505050565b61113f338383612612565b610f7460003361118485858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611e9f915050565b61ffff1660405180602001604052806000815250612928565b60006111a882611c9c565b61121a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016104d5565b6103e982611cce565b6001600160a01b038116600090815260208190526040812080546002919061124a90613081565b6103e99291506130fa565b6001600160a01b0384166112bb5760405162461bcd60e51b815260206004820152602760248201527f4552433732313a2066726f6d2063616e6e6f7420626520746865207a65726f206044820152666164647265737360c81b60648201526084016104d5565b6001600160a01b03821661131f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a20746f2063616e6e6f7420626520746865207a65726f206164604482015264647265737360d81b60648201526084016104d5565b6001600160a01b038416600090815260208190526040902080546002919061134690613081565b6113519291506130fa565b811061139f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a20746f6b656e20696e646578206f7574206f662072616e676560448201526064016104d5565b6001600160a01b038416600090815260208190526040812080546113c79190610d4e90613081565b61ffff8116600090815261013b60205260409020549091506001600160a01b03163314806113fd57506001600160a01b03851633145b61146f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a2063616c6c6572206973206e65697468657220617070726f7660448201527f6564206e6f72206f776e6572000000000000000000000000000000000000000060648201526084016104d5565b61147b85858585611f7b565b61149a85848361ffff1660405180602001604052806000815250612928565b508061ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b606061013d80546103ff90613081565b6001600160a01b0382163314156115765760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2063616e6e6f7420617070726f76652063616c6c657220617360448201527f206f70657261746f72000000000000000000000000000000000000000000000060648201526084016104d5565b336000908152602081905260408120805461159090613081565b80601f01602080910402602001604051908101604052809291908181526020018280546115bc90613081565b80156116095780601f106115de57610100808354040283529160200191611609565b820191906000526020600020905b8154815290600101906020018083116115ec57829003601f168201915b5050505050905060005b815181101561168a578261162857600061162a565b835b61013b60006116398585611e9f565b61ffff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790556116836002826130cc565b9050611613565b5060405182151581526001600160a01b0384169033907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319060200160405180910390a3505050565b6001600160a01b0384166117385760405162461bcd60e51b815260206004820152602760248201527f4552433732313a2066726f6d2063616e6e6f7420626520746865207a65726f206044820152666164647265737360c81b60648201526084016104d5565b6001600160a01b03831661179c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a20746f2063616e6e6f7420626520746865207a65726f206164604482015264647265737360d81b60648201526084016104d5565b61ffff8216600090815261013b60205260409020546001600160a01b03163314806117cf57506001600160a01b03841633145b6118415760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420617070726f766564206660448201527f6f7220616c6c20746f6b656e730000000000000000000000000000000000000060648201526084016104d5565b60005b6001600160a01b03851660009081526020819052604090208054849161186d916108a590613081565b61ffff16141580156118a257506001600160a01b0385166000908152602081905260409020805461189d90613081565b905081105b156118b9576118b26002826130cc565b9050611844565b6001600160a01b038516600090815260208190526040902080546118dc90613081565b905081106119525760405162461bcd60e51b815260206004820152602360248201527f4552433732313a2066726f6d20646f6573206e6f74206f776e2074686520746f60448201527f6b656e000000000000000000000000000000000000000000000000000000000060648201526084016104d5565b60005b6001805461196290613081565b90508110156119ab57856001600160a01b031661198560018054610a4190613081565b6001600160a01b03161415611999576119ab565b6119a46014826130cc565b9050611955565b856001600160a01b03166119c560018054610a4190613081565b6001600160a01b031614611a415760405162461bcd60e51b815260206004820152602260248201527f4552433732313a2066726f6d206973206e6f7420696e206f776e657273206c6960448201527f737400000000000000000000000000000000000000000000000000000000000060648201526084016104d5565b611a4d86828785611f7b565b611a5986868686612928565b5083856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6001600160a01b03821660009081526020819052604081208054829190611ac990613081565b80601f0160208091040260200160405190810160405280929190818152602001828054611af590613081565b8015611b425780601f10611b1757610100808354040283529160200191611b42565b820191906000526020600020905b815481529060010190602001808311611b2557829003601f168201915b5050505050905060005b8151811015611bae57836001600160a01b031661013b6000611b6e8585611e9f565b61ffff1681526020810191909152604001600020546001600160a01b031614611b9c576000925050506103e9565b611ba76002826130cc565b9050611b4c565b506001949350505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611c4c57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806103e957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146103e9565b60006002826127108110611cb257611cb2613162565b602081049091015460ff601f9092166101000a90041692915050565b600080805b60018054611ce090613081565b9050811015611da2576000611cfb60018054610a4190613081565b905060005b6001600160a01b03821660009081526020819052604090208054611d2390613081565b9050811015611d79576001600160a01b038216600090815260208190526040902080548791611d55916108a590613081565b61ffff161415611d6757819350611d79565b611d726002826130cc565b9050611d00565b506001600160a01b03831615611d8f5750611da2565b50611d9b6014826130cc565b9050611cd3565b5092915050565b600060018054611db890613081565b90508210611e085760405162461bcd60e51b815260206004820152601f60248201527f4552433732313a206f776e6572496e646578206f7574206f6620626f756e640060448201526064016104d5565b6103e96102ee60018054611e1b90613081565b80601f0160208091040260200160405190810160405280929190818152602001828054611e4790613081565b8015611e945780601f10611e6957610100808354040283529160200191611e94565b820191906000526020600020905b815481529060010190602001808311611e7757829003601f168201915b505050505084611f05565b6000611eac8260026130cc565b83511015611efc5760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e647300000000000000000000000060448201526064016104d5565b50016002015190565b6000611f128260146130cc565b83511015611f625760405162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e6473000000000000000000000060448201526064016104d5565b5001602001516c01000000000000000000000000900490565b836001600160a01b031661202560018054611f9590613081565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc190613081565b801561200e5780601f10611fe35761010080835404028352916020019161200e565b820191906000526020600020905b815481529060010190602001808311611ff157829003601f168201915b5050505050856014612020919061310e565b611f05565b6001600160a01b0316146120a15760405162461bcd60e51b815260206004820152602860248201527f4552433732313a207472616e736665722066726f6d206164647265737320697360448201527f20696e76616c696400000000000000000000000000000000000000000000000060648201526084016104d5565b6001600160a01b038216600090815260208190526040902080546120c490613081565b151590506121095760018260601b6040516020016120e3929190613230565b60405160208183030381529060405260019080519060200190612107929190612bf5565b505b6001600160a01b038416600090815260208190526040812080546121c2919061213190613081565b80601f016020809104026020016040519081016040528092919081815260200182805461215d90613081565b80156121aa5780601f1061217f576101008083540402835291602001916121aa565b820191906000526020600020905b81548152906001019060200180831161218d57829003601f168201915b5050505050838460026121bd91906130cc565b612acd565b6001600160a01b03861660009081526020819052604090208054919250906121e990613081565b9050600214156123c0576122906001805461220390613081565b80601f016020809104026020016040519081016040528092919081815260200182805461222f90613081565b801561227c5780601f106122515761010080835404028352916020019161227c565b820191906000526020600020905b81548152906001019060200180831161225f57829003601f168201915b505050505060008660146121bd919061310e565b612364600180546122a090613081565b80601f01602080910402602001604051908101604052809291908181526020018280546122cc90613081565b80156123195780601f106122ee57610100808354040283529160200191612319565b820191906000526020600020905b8154815290600101906020018083116122fc57829003601f168201915b505050505086600161232b91906130cc565b61233690601461310e565b6123418860016130cc565b61234c90601461310e565b6001805461235990613081565b6121bd92915061314b565b60405160200161237592919061326d565b60405160208183030381529060405260019080519060200190612399929190612bf5565b506001600160a01b03851660009081526020819052604081206123bb91612c79565b6125a9565b6001600160a01b0385166000908152602081905260409020805461246e91906123e890613081565b80601f016020809104026020016040519081016040528092919081815260200182805461241490613081565b80156124615780601f1061243657610100808354040283529160200191612461565b820191906000526020600020905b81548152906001019060200180831161244457829003601f168201915b5050505050600084612acd565b6001600160a01b0386166000908152602081905260409020805461255e919061249690613081565b80601f01602080910402602001604051908101604052809291908181526020018280546124c290613081565b801561250f5780601f106124e45761010080835404028352916020019161250f565b820191906000526020600020905b8154815290600101906020018083116124f257829003601f168201915b505050505084600261252191906130cc565b6001600160a01b03891660009081526020819052604090208054600291889161254990613081565b61255492915061314b565b6121bd919061314b565b60405160200161256f92919061326d565b60408051601f198184030181529181526001600160a01b0387166000908152602081815291902082516125a793919290910190612bf5565b505b6001600160a01b0383166000908152602081815260409182902091516125d2929184910161329c565b60408051601f198184030181529181526001600160a01b03851660009081526020818152919020825161260a93919290910190612bf5565b505050505050565b806126855760405162461bcd60e51b815260206004820152602560248201527f4552433732313a2063616e6e6f74206d696e742077697468206e6f20746f6b6560448201527f6e2049647300000000000000000000000000000000000000000000000000000060648201526084016104d5565b6126906002826132b8565b156127035760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a20746f6b656e4964732073686f756c6420626520627974657360448201527f206f662075696e7431360000000000000000000000000000000000000000000060648201526084016104d5565b6001600160a01b0383166000908152602081905260409020805461272690613081565b1515905061276b5760018360601b604051602001612745929190613230565b60405160208183030381529060405260019080519060200190612769929190612bf5565b505b60005b818110156128be5760026127b984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250611e9f915050565b61ffff1661271081106127ce576127ce613162565b602081049091015460ff601f9092166101000a900416156128315760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206578697374730000000060448201526064016104d5565b6001600261287685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250611e9f915050565b61ffff16612710811061288b5761288b613162565b602091828204019190066101000a81548160ff0219169083151502179055506002816128b791906130cc565b905061276e565b506001600160a01b0383166000908152602081815260409182902091516128ea929185918591016132cc565b60408051601f198184030181529181526001600160a01b03851660009081526020818152919020825161292293919290910190612bf5565b50505050565b60006001600160a01b0384163b15611bae576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906129859033908990889088906004016132ec565b602060405180830381600087803b15801561299f57600080fd5b505af19250505080156129cf575060408051601f3d908101601f191682019092526129cc91810190613328565b60015b612a7f573d8080156129fd576040519150601f19603f3d011682016040523d82523d6000602084013e612a02565b606091505b508051612a775760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104d5565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050949350505050565b606081612adb81601f6130cc565b1015612b295760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064016104d5565b612b3382846130cc565b84511015612b835760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e647300000000000000000000000000000060448201526064016104d5565b606082158015612ba25760405191506000825260208201604052612bec565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612bdb578051835260209283019201612bc3565b5050858452601f01601f1916604052505b50949350505050565b828054612c0190613081565b90600052602060002090601f016020900481019282612c235760008555612c69565b82601f10612c3c57805160ff1916838001178555612c69565b82800160010185558215612c69579182015b82811115612c69578251825591602001919060010190612c4e565b50612c75929150612cb6565b5090565b508054612c8590613081565b6000825580601f10612c95575050565b601f016020900490600052602060002090810190612cb39190612cb6565b50565b5b80821115612c755760008155600101612cb7565b600060208284031215612cdd57600080fd5b5035919050565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114612cb357600080fd5b600060208284031215612d2457600080fd5b8135610c2381612ce4565b60005b83811015612d4a578181015183820152602001612d32565b838111156129225750506000910152565b60008151808452612d73816020860160208601612d2f565b601f01601f19169290920160200192915050565b602081526000610c236020830184612d5b565b80356001600160a01b0381168114612db157600080fd5b919050565b60008060408385031215612dc957600080fd5b612dd283612d9a565b946020939093013593505050565b600080600060608486031215612df557600080fd5b612dfe84612d9a565b9250612e0c60208501612d9a565b9150604084013590509250925092565b600060208284031215612e2e57600080fd5b610c2382612d9a565b600080600060608486031215612e4c57600080fd5b612e5584612d9a565b95602085013595506040909401359392505050565b60008060208385031215612e7d57600080fd5b823567ffffffffffffffff80821115612e9557600080fd5b818501915085601f830112612ea957600080fd5b813581811115612eb857600080fd5b866020828501011115612eca57600080fd5b60209290920196919550909350505050565b60008060008060808587031215612ef257600080fd5b612efb85612d9a565b935060208501359250612f1060408601612d9a565b9396929550929360600135925050565b60008060408385031215612f3357600080fd5b612f3c83612d9a565b915060208301358015158114612f5157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612f8857600080fd5b612f9185612d9a565b9350612f9f60208601612d9a565b925060408501359150606085013567ffffffffffffffff80821115612fc357600080fd5b818701915087601f830112612fd757600080fd5b813581811115612fe957612fe9612f5c565b604051601f8201601f19908116603f0116810190838211818310171561301157613011612f5c565b816040528281528a602084870101111561302a57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561306157600080fd5b61306a83612d9a565b915061307860208401612d9a565b90509250929050565b600181811c9082168061309557607f821691505b6020821081141561070457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156130df576130df6130b6565b500190565b634e487b7160e01b600052601260045260246000fd5b600082613109576131096130e4565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613146576131466130b6565b500290565b60008282101561315d5761315d6130b6565b500390565b634e487b7160e01b600052603260045260246000fd5b8054600090600181811c908083168061319257607f831692505b60208084108214156131b457634e487b7160e01b600052602260045260246000fd5b8180156131c857600181146131f757613224565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650613224565b60008881526020902060005b8681101561321c5781548b820152908501908301613203565b505084890196505b50505050505092915050565b600061323c8285613178565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009390931683525050601401919050565b6000835161327f818460208801612d2f565b835190830190613293818360208801612d2f565b01949350505050565b60006132a88285613178565b8351613293818360208801612d2f565b6000826132c7576132c76130e4565b500690565b60006132d88286613178565b838582376000930192835250909392505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261331e6080830184612d5b565b9695505050505050565b60006020828403121561333a57600080fd5b8151610c2381612ce456fea2646970667358221220729e76ddeab0fbcfa4a86211682c25f06001030fd9647fa968d960f6ad6d695b64736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101815760003560e01c806342842e0e116100d857806389c8af831161008c578063b88d4fde11610066578063b88d4fde14610321578063c87b56dd14610334578063e985e9c51461035557600080fd5b806389c8af83146102f357806395d89b4114610306578063a22cb4651461030e57600080fd5b806357fcd8c0116100bd57806357fcd8c0146102ba5780636352211e146102cd57806370a08231146102e057600080fd5b806342842e0e146102945780634f6ccce7146102a757600080fd5b8063095ea7b31161013a57806325174f0e1161011457806325174f0e1461025b5780632f745c591461026e578063426a84931461028157600080fd5b8063095ea7b31461021d57806318160ddd1461023257806323b872dd1461024857600080fd5b80630216e3041161016b5780630216e304146101c157806306fdde03146101dd578063081812fc146101f257600080fd5b8062923f9e1461018657806301ffc9a7146101ae575b600080fd5b610199610194366004612ccb565b610368565b60405190151581526020015b60405180910390f35b6101996101bc366004612d12565b610393565b6101ca61271081565b60405161ffff90911681526020016101a5565b6101e56103ef565b6040516101a59190612d87565b610205610200366004612ccb565b610482565b6040516001600160a01b0390911681526020016101a5565b61023061022b366004612db6565b6104ff565b005b61023a6106c2565b6040519081526020016101a5565b610230610256366004612de0565b61070a565b61023a610269366004612e1c565b610bd5565b61023a61027c366004612db6565b610c84565b61023061028f366004612e37565b610de9565b6102306102a2366004612de0565b610f59565b61023a6102b5366004612ccb565b610f79565b6102306102c8366004612e6a565b611134565b6102056102db366004612ccb565b61119d565b61023a6102ee366004612e1c565b611223565b610230610301366004612edc565b611255565b6101e56114e7565b61023061031c366004612f20565b6114f7565b61023061032f366004612f72565b6116d2565b6101e5610342366004612ccb565b5060408051602081019091526000815290565b61019961036336600461304e565b611aa3565b600281612710811061037957600080fd5b60209182820401919006915054906101000a900460ff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d630000000000000000000000000000000000000000000000000000000014806103e957506103e982611bb9565b92915050565b606061013c80546103ff90613081565b80601f016020809104026020016040519081016040528092919081815260200182805461042b90613081565b80156104785780601f1061044d57610100808354040283529160200191610478565b820191906000526020600020905b81548152906001019060200180831161045b57829003601f168201915b5050505050905090565b600061048d82611c9c565b6104de5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20646f6573206e6f742065786973740000000060448201526064015b60405180910390fd5b5061ffff16600090815261013b60205260409020546001600160a01b031690565b600061050a82611cce565b90506001600160a01b0381166105885760405162461bcd60e51b815260206004820152602b60248201527f4552433732313a20617070726f766520717565727920666f72206e6f6e65786960448201527f7374656e7420746f6b656e00000000000000000000000000000000000000000060648201526084016104d5565b61ffff8216600090815261013b60205260409020546001600160a01b03163314806105bb57506001600160a01b03811633145b6106535760405162461bcd60e51b815260206004820152604660248201527f4552433732313a2063616c6c6572206973206e6f7420746865206f776e65722060448201527f6e6f7220616e20617070726f766564206f70657261746f7220666f722074686560648201527f20746f6b656e0000000000000000000000000000000000000000000000000000608482015260a4016104d5565b61ffff8216600090815261013b6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600080805b600180546106d490613081565b9050811015610704576106e681611da9565b6106f090836130cc565b91506106fd6014826130cc565b90506106c7565b50919050565b6001600160a01b0383166107705760405162461bcd60e51b815260206004820152602760248201527f4552433732313a2066726f6d2063616e6e6f7420626520746865207a65726f206044820152666164647265737360c81b60648201526084016104d5565b6001600160a01b0382166107d45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a20746f2063616e6e6f7420626520746865207a65726f206164604482015264647265737360d81b60648201526084016104d5565b61ffff8116600090815261013b60205260409020546001600160a01b031633148061080757506001600160a01b03831633145b6108795760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420617070726f766564206660448201527f6f7220616c6c20746f6b656e730000000000000000000000000000000000000060648201526084016104d5565b60005b6001600160a01b038416600090815260208190526040902080548391610929916108a590613081565b80601f01602080910402602001604051908101604052809291908181526020018280546108d190613081565b801561091e5780601f106108f35761010080835404028352916020019161091e565b820191906000526020600020905b81548152906001019060200180831161090157829003601f168201915b505050505083611e9f565b61ffff161415801561095e57506001600160a01b0384166000908152602081905260409020805461095990613081565b905081105b156109755761096e6002826130cc565b905061087c565b6001600160a01b0384166000908152602081905260409020805461099890613081565b90508110610a0e5760405162461bcd60e51b815260206004820152602360248201527f4552433732313a2066726f6d20646f6573206e6f74206f776e2074686520746f60448201527f6b656e000000000000000000000000000000000000000000000000000000000060648201526084016104d5565b60005b60018054610a1e90613081565b9050811015610aeb57846001600160a01b0316610ac560018054610a4190613081565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6d90613081565b8015610aba5780601f10610a8f57610100808354040283529160200191610aba565b820191906000526020600020905b815481529060010190602001808311610a9d57829003601f168201915b505050505083611f05565b6001600160a01b03161415610ad957610aeb565b610ae46014826130cc565b9050610a11565b846001600160a01b0316610b0560018054610a4190613081565b6001600160a01b031614610b815760405162461bcd60e51b815260206004820152602260248201527f4552433732313a2066726f6d206973206e6f7420696e206f776e657273206c6960448201527f737400000000000000000000000000000000000000000000000000000000000060648201526084016104d5565b610b8d85828685611f7b565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6000805b60018054610be690613081565b9050811015610c3c57826001600160a01b0316610c0960018054610a4190613081565b6001600160a01b03161415610c2a57610c236014826130fa565b9392505050565b610c356014826130cc565b9050610bd9565b60405162461bcd60e51b815260206004820152601760248201527f4552433732313a204f776e6572206e6f7420666f756e6400000000000000000060448201526064016104d5565b6001600160a01b03821660009081526020819052604081208054610ca790613081565b9050610cb483600261310e565b10610d265760405162461bcd60e51b8152602060048201526024808201527f455243373231456e756d657261626c653a20696e646578206f7574206f66207260448201527f616e67650000000000000000000000000000000000000000000000000000000060648201526084016104d5565b6001600160a01b03831660009081526020819052604090208054610dde9190610d4e90613081565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7a90613081565b8015610dc75780601f10610d9c57610100808354040283529160200191610dc7565b820191906000526020600020905b815481529060010190602001808311610daa57829003601f168201915b5050505050836002610dd9919061310e565b611e9f565b61ffff169392505050565b61ffff8216600090815261013b60205260409020546001600160a01b03163314610f18573360009081526020819052604090208054610e2790613081565b9050610e3482600261310e565b10610e815760405162461bcd60e51b815260206004820181905260248201527f4552433732313a20746f6b656e20696e646578206f7574206f662072616e676560448201526064016104d5565b33600090815260208190526040902080548391610ea191610d4e90613081565b61ffff1614610f185760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a2063616c6c6572206973206e65697468657220617070726f7660448201527f6564206e6f72206f776e6572000000000000000000000000000000000000000060648201526084016104d5565b5061ffff16600090815261013b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610f74838383604051806020016040528060008152506116d2565b505050565b600080805b838111610fac57610f8e82611da9565b610f9890826130cc565b9050610fa56014836130cc565b9150610f7e565b610fb760148361314b565b9150610fc282611da9565b610fcc908261314b565b905061112860008061106860018054610fe490613081565b80601f016020809104026020016040519081016040528092919081815260200182805461101090613081565b801561105d5780601f106110325761010080835404028352916020019161105d565b820191906000526020600020905b81548152906001019060200180831161104057829003601f168201915b505050505086611f05565b6001600160a01b03166001600160a01b03168152602001908152602001600020805461109390613081565b80601f01602080910402602001604051908101604052809291908181526020018280546110bf90613081565b801561110c5780601f106110e15761010080835404028352916020019161110c565b820191906000526020600020905b8154815290600101906020018083116110ef57829003601f168201915b5050505050828661111d919061314b565b610dd990600261310e565b61ffff16949350505050565b61113f338383612612565b610f7460003361118485858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611e9f915050565b61ffff1660405180602001604052806000815250612928565b60006111a882611c9c565b61121a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016104d5565b6103e982611cce565b6001600160a01b038116600090815260208190526040812080546002919061124a90613081565b6103e99291506130fa565b6001600160a01b0384166112bb5760405162461bcd60e51b815260206004820152602760248201527f4552433732313a2066726f6d2063616e6e6f7420626520746865207a65726f206044820152666164647265737360c81b60648201526084016104d5565b6001600160a01b03821661131f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a20746f2063616e6e6f7420626520746865207a65726f206164604482015264647265737360d81b60648201526084016104d5565b6001600160a01b038416600090815260208190526040902080546002919061134690613081565b6113519291506130fa565b811061139f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a20746f6b656e20696e646578206f7574206f662072616e676560448201526064016104d5565b6001600160a01b038416600090815260208190526040812080546113c79190610d4e90613081565b61ffff8116600090815261013b60205260409020549091506001600160a01b03163314806113fd57506001600160a01b03851633145b61146f5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a2063616c6c6572206973206e65697468657220617070726f7660448201527f6564206e6f72206f776e6572000000000000000000000000000000000000000060648201526084016104d5565b61147b85858585611f7b565b61149a85848361ffff1660405180602001604052806000815250612928565b508061ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b606061013d80546103ff90613081565b6001600160a01b0382163314156115765760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2063616e6e6f7420617070726f76652063616c6c657220617360448201527f206f70657261746f72000000000000000000000000000000000000000000000060648201526084016104d5565b336000908152602081905260408120805461159090613081565b80601f01602080910402602001604051908101604052809291908181526020018280546115bc90613081565b80156116095780601f106115de57610100808354040283529160200191611609565b820191906000526020600020905b8154815290600101906020018083116115ec57829003601f168201915b5050505050905060005b815181101561168a578261162857600061162a565b835b61013b60006116398585611e9f565b61ffff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790556116836002826130cc565b9050611613565b5060405182151581526001600160a01b0384169033907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319060200160405180910390a3505050565b6001600160a01b0384166117385760405162461bcd60e51b815260206004820152602760248201527f4552433732313a2066726f6d2063616e6e6f7420626520746865207a65726f206044820152666164647265737360c81b60648201526084016104d5565b6001600160a01b03831661179c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a20746f2063616e6e6f7420626520746865207a65726f206164604482015264647265737360d81b60648201526084016104d5565b61ffff8216600090815261013b60205260409020546001600160a01b03163314806117cf57506001600160a01b03841633145b6118415760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420617070726f766564206660448201527f6f7220616c6c20746f6b656e730000000000000000000000000000000000000060648201526084016104d5565b60005b6001600160a01b03851660009081526020819052604090208054849161186d916108a590613081565b61ffff16141580156118a257506001600160a01b0385166000908152602081905260409020805461189d90613081565b905081105b156118b9576118b26002826130cc565b9050611844565b6001600160a01b038516600090815260208190526040902080546118dc90613081565b905081106119525760405162461bcd60e51b815260206004820152602360248201527f4552433732313a2066726f6d20646f6573206e6f74206f776e2074686520746f60448201527f6b656e000000000000000000000000000000000000000000000000000000000060648201526084016104d5565b60005b6001805461196290613081565b90508110156119ab57856001600160a01b031661198560018054610a4190613081565b6001600160a01b03161415611999576119ab565b6119a46014826130cc565b9050611955565b856001600160a01b03166119c560018054610a4190613081565b6001600160a01b031614611a415760405162461bcd60e51b815260206004820152602260248201527f4552433732313a2066726f6d206973206e6f7420696e206f776e657273206c6960448201527f737400000000000000000000000000000000000000000000000000000000000060648201526084016104d5565b611a4d86828785611f7b565b611a5986868686612928565b5083856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b6001600160a01b03821660009081526020819052604081208054829190611ac990613081565b80601f0160208091040260200160405190810160405280929190818152602001828054611af590613081565b8015611b425780601f10611b1757610100808354040283529160200191611b42565b820191906000526020600020905b815481529060010190602001808311611b2557829003601f168201915b5050505050905060005b8151811015611bae57836001600160a01b031661013b6000611b6e8585611e9f565b61ffff1681526020810191909152604001600020546001600160a01b031614611b9c576000925050506103e9565b611ba76002826130cc565b9050611b4c565b506001949350505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd000000000000000000000000000000000000000000000000000000001480611c4c57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b806103e957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146103e9565b60006002826127108110611cb257611cb2613162565b602081049091015460ff601f9092166101000a90041692915050565b600080805b60018054611ce090613081565b9050811015611da2576000611cfb60018054610a4190613081565b905060005b6001600160a01b03821660009081526020819052604090208054611d2390613081565b9050811015611d79576001600160a01b038216600090815260208190526040902080548791611d55916108a590613081565b61ffff161415611d6757819350611d79565b611d726002826130cc565b9050611d00565b506001600160a01b03831615611d8f5750611da2565b50611d9b6014826130cc565b9050611cd3565b5092915050565b600060018054611db890613081565b90508210611e085760405162461bcd60e51b815260206004820152601f60248201527f4552433732313a206f776e6572496e646578206f7574206f6620626f756e640060448201526064016104d5565b6103e96102ee60018054611e1b90613081565b80601f0160208091040260200160405190810160405280929190818152602001828054611e4790613081565b8015611e945780601f10611e6957610100808354040283529160200191611e94565b820191906000526020600020905b815481529060010190602001808311611e7757829003601f168201915b505050505084611f05565b6000611eac8260026130cc565b83511015611efc5760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e647300000000000000000000000060448201526064016104d5565b50016002015190565b6000611f128260146130cc565b83511015611f625760405162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e6473000000000000000000000060448201526064016104d5565b5001602001516c01000000000000000000000000900490565b836001600160a01b031661202560018054611f9590613081565b80601f0160208091040260200160405190810160405280929190818152602001828054611fc190613081565b801561200e5780601f10611fe35761010080835404028352916020019161200e565b820191906000526020600020905b815481529060010190602001808311611ff157829003601f168201915b5050505050856014612020919061310e565b611f05565b6001600160a01b0316146120a15760405162461bcd60e51b815260206004820152602860248201527f4552433732313a207472616e736665722066726f6d206164647265737320697360448201527f20696e76616c696400000000000000000000000000000000000000000000000060648201526084016104d5565b6001600160a01b038216600090815260208190526040902080546120c490613081565b151590506121095760018260601b6040516020016120e3929190613230565b60405160208183030381529060405260019080519060200190612107929190612bf5565b505b6001600160a01b038416600090815260208190526040812080546121c2919061213190613081565b80601f016020809104026020016040519081016040528092919081815260200182805461215d90613081565b80156121aa5780601f1061217f576101008083540402835291602001916121aa565b820191906000526020600020905b81548152906001019060200180831161218d57829003601f168201915b5050505050838460026121bd91906130cc565b612acd565b6001600160a01b03861660009081526020819052604090208054919250906121e990613081565b9050600214156123c0576122906001805461220390613081565b80601f016020809104026020016040519081016040528092919081815260200182805461222f90613081565b801561227c5780601f106122515761010080835404028352916020019161227c565b820191906000526020600020905b81548152906001019060200180831161225f57829003601f168201915b505050505060008660146121bd919061310e565b612364600180546122a090613081565b80601f01602080910402602001604051908101604052809291908181526020018280546122cc90613081565b80156123195780601f106122ee57610100808354040283529160200191612319565b820191906000526020600020905b8154815290600101906020018083116122fc57829003601f168201915b505050505086600161232b91906130cc565b61233690601461310e565b6123418860016130cc565b61234c90601461310e565b6001805461235990613081565b6121bd92915061314b565b60405160200161237592919061326d565b60405160208183030381529060405260019080519060200190612399929190612bf5565b506001600160a01b03851660009081526020819052604081206123bb91612c79565b6125a9565b6001600160a01b0385166000908152602081905260409020805461246e91906123e890613081565b80601f016020809104026020016040519081016040528092919081815260200182805461241490613081565b80156124615780601f1061243657610100808354040283529160200191612461565b820191906000526020600020905b81548152906001019060200180831161244457829003601f168201915b5050505050600084612acd565b6001600160a01b0386166000908152602081905260409020805461255e919061249690613081565b80601f01602080910402602001604051908101604052809291908181526020018280546124c290613081565b801561250f5780601f106124e45761010080835404028352916020019161250f565b820191906000526020600020905b8154815290600101906020018083116124f257829003601f168201915b505050505084600261252191906130cc565b6001600160a01b03891660009081526020819052604090208054600291889161254990613081565b61255492915061314b565b6121bd919061314b565b60405160200161256f92919061326d565b60408051601f198184030181529181526001600160a01b0387166000908152602081815291902082516125a793919290910190612bf5565b505b6001600160a01b0383166000908152602081815260409182902091516125d2929184910161329c565b60408051601f198184030181529181526001600160a01b03851660009081526020818152919020825161260a93919290910190612bf5565b505050505050565b806126855760405162461bcd60e51b815260206004820152602560248201527f4552433732313a2063616e6e6f74206d696e742077697468206e6f20746f6b6560448201527f6e2049647300000000000000000000000000000000000000000000000000000060648201526084016104d5565b6126906002826132b8565b156127035760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a20746f6b656e4964732073686f756c6420626520627974657360448201527f206f662075696e7431360000000000000000000000000000000000000000000060648201526084016104d5565b6001600160a01b0383166000908152602081905260409020805461272690613081565b1515905061276b5760018360601b604051602001612745929190613230565b60405160208183030381529060405260019080519060200190612769929190612bf5565b505b60005b818110156128be5760026127b984848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250611e9f915050565b61ffff1661271081106127ce576127ce613162565b602081049091015460ff601f9092166101000a900416156128315760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206578697374730000000060448201526064016104d5565b6001600261287685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250611e9f915050565b61ffff16612710811061288b5761288b613162565b602091828204019190066101000a81548160ff0219169083151502179055506002816128b791906130cc565b905061276e565b506001600160a01b0383166000908152602081815260409182902091516128ea929185918591016132cc565b60408051601f198184030181529181526001600160a01b03851660009081526020818152919020825161292293919290910190612bf5565b50505050565b60006001600160a01b0384163b15611bae576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a02906129859033908990889088906004016132ec565b602060405180830381600087803b15801561299f57600080fd5b505af19250505080156129cf575060408051601f3d908101601f191682019092526129cc91810190613328565b60015b612a7f573d8080156129fd576040519150601f19603f3d011682016040523d82523d6000602084013e612a02565b606091505b508051612a775760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e746572000000000000000000000000000060648201526084016104d5565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050949350505050565b606081612adb81601f6130cc565b1015612b295760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064016104d5565b612b3382846130cc565b84511015612b835760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e647300000000000000000000000000000060448201526064016104d5565b606082158015612ba25760405191506000825260208201604052612bec565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612bdb578051835260209283019201612bc3565b5050858452601f01601f1916604052505b50949350505050565b828054612c0190613081565b90600052602060002090601f016020900481019282612c235760008555612c69565b82601f10612c3c57805160ff1916838001178555612c69565b82800160010185558215612c69579182015b82811115612c69578251825591602001919060010190612c4e565b50612c75929150612cb6565b5090565b508054612c8590613081565b6000825580601f10612c95575050565b601f016020900490600052602060002090810190612cb39190612cb6565b50565b5b80821115612c755760008155600101612cb7565b600060208284031215612cdd57600080fd5b5035919050565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114612cb357600080fd5b600060208284031215612d2457600080fd5b8135610c2381612ce4565b60005b83811015612d4a578181015183820152602001612d32565b838111156129225750506000910152565b60008151808452612d73816020860160208601612d2f565b601f01601f19169290920160200192915050565b602081526000610c236020830184612d5b565b80356001600160a01b0381168114612db157600080fd5b919050565b60008060408385031215612dc957600080fd5b612dd283612d9a565b946020939093013593505050565b600080600060608486031215612df557600080fd5b612dfe84612d9a565b9250612e0c60208501612d9a565b9150604084013590509250925092565b600060208284031215612e2e57600080fd5b610c2382612d9a565b600080600060608486031215612e4c57600080fd5b612e5584612d9a565b95602085013595506040909401359392505050565b60008060208385031215612e7d57600080fd5b823567ffffffffffffffff80821115612e9557600080fd5b818501915085601f830112612ea957600080fd5b813581811115612eb857600080fd5b866020828501011115612eca57600080fd5b60209290920196919550909350505050565b60008060008060808587031215612ef257600080fd5b612efb85612d9a565b935060208501359250612f1060408601612d9a565b9396929550929360600135925050565b60008060408385031215612f3357600080fd5b612f3c83612d9a565b915060208301358015158114612f5157600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612f8857600080fd5b612f9185612d9a565b9350612f9f60208601612d9a565b925060408501359150606085013567ffffffffffffffff80821115612fc357600080fd5b818701915087601f830112612fd757600080fd5b813581811115612fe957612fe9612f5c565b604051601f8201601f19908116603f0116810190838211818310171561301157613011612f5c565b816040528281528a602084870101111561302a57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561306157600080fd5b61306a83612d9a565b915061307860208401612d9a565b90509250929050565b600181811c9082168061309557607f821691505b6020821081141561070457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156130df576130df6130b6565b500190565b634e487b7160e01b600052601260045260246000fd5b600082613109576131096130e4565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613146576131466130b6565b500290565b60008282101561315d5761315d6130b6565b500390565b634e487b7160e01b600052603260045260246000fd5b8054600090600181811c908083168061319257607f831692505b60208084108214156131b457634e487b7160e01b600052602260045260246000fd5b8180156131c857600181146131f757613224565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861689528489019650613224565b60008881526020902060005b8681101561321c5781548b820152908501908301613203565b505084890196505b50505050505092915050565b600061323c8285613178565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009390931683525050601401919050565b6000835161327f818460208801612d2f565b835190830190613293818360208801612d2f565b01949350505050565b60006132a88285613178565b8351613293818360208801612d2f565b6000826132c7576132c76130e4565b500690565b60006132d88286613178565b838582376000930192835250909392505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261331e6080830184612d5b565b9695505050505050565b60006020828403121561333a57600080fd5b8151610c2381612ce456fea2646970667358221220729e76ddeab0fbcfa4a86211682c25f06001030fd9647fa968d960f6ad6d695b64736f6c63430008080033",
  "devdoc": {
    "details": "See https://eips.ethereum.org/EIPS/eip-721      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data      We use the uint16 / bytes2 tokenId",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "approve(address,uint256,uint256)": {
        "details": "Approve \"to\" to manage token Id",
        "params": {
          "to": "address The address which will manage the token Id",
          "tokenId": "uint256 The token Id to manage",
          "tokenIndex": "uint256 The index of the token in the owner's list"
        }
      },
      "balanceOf(address)": {
        "details": "There are two bytes per tokenId",
        "params": {
          "owner": "address The address we retrieve the balance for"
        },
        "returns": {
          "_0": "uint256 The number of tokens owned by the address"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getOwnerIndex(address)": {
        "details": "Returns the index of owner in the internal array of owners. Revert if not found.",
        "params": {
          "owner": "address The address we retrieve the index for"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns whether `operator` is an approved operator for the caller.",
        "params": {
          "operator": "The address of the operator to check.",
          "owner": "The address of the owner to check."
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.",
        "params": {
          "tokenId": "uint265 A given token id"
        },
        "returns": {
          "_0": "address The owner of the token."
        }
      },
      "safeMintBatch(bytes)": {
        "details": "Add a batch of token Ids given as a bytes array to the sender",
        "params": {
          "tokenIds": "bytes a bytes of tokenIds as bytes2 (uint16)"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,uint256,address,uint256)": {
        "details": "Transfer token with minimal computing since all the required data to check is given",
        "params": {
          "from": "address The address which you want to transfer the token from",
          "fromIndex": "uint256 The index of \"from\" in the owners bytes. This is to avoid a search in the array.",
          "to": "address The address which you want to transfer the token to",
          "tokenIndex": "uint256 The index of the token to transfer in the from's token list."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.",
        "params": {
          "_approved": "Whether to add or remove `operator` as an operator.",
          "operator": "The address of the operator to add or remove."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenByIndex(uint256)": {
        "details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "details": "Returns the total amount of tokens stored by the contract."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "title": "ERC-721 Non-Fungible Token optimized for batch minting with enumerable interface",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3237,
        "contract": "contracts/tokens/ERC721Enumerable.sol:ERC721Enumerable",
        "label": "_tokensByOwner",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 3239,
        "contract": "contracts/tokens/ERC721Enumerable.sol:ERC721Enumerable",
        "label": "owners",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 3246,
        "contract": "contracts/tokens/ERC721Enumerable.sol:ERC721Enumerable",
        "label": "tokenExists",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bool)10000_storage"
      },
      {
        "astId": 3250,
        "contract": "contracts/tokens/ERC721Enumerable.sol:ERC721Enumerable",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 3252,
        "contract": "contracts/tokens/ERC721Enumerable.sol:ERC721Enumerable",
        "label": "_name",
        "offset": 0,
        "slot": "316",
        "type": "t_string_storage"
      },
      {
        "astId": 3254,
        "contract": "contracts/tokens/ERC721Enumerable.sol:ERC721Enumerable",
        "label": "_symbol",
        "offset": 0,
        "slot": "317",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)10000_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[10000]",
        "numberOfBytes": "10016"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}