{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "abiEncodeBytes2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "abiEncodeBytes32",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "addressToBytes2Concat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "addressToBytes32Concat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "input",
          "type": "uint16[]"
        }
      ],
      "name": "addressToTokenId16LoopPush",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "addressToTokenId256LoopPush",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressToTokenIds16Mapping",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressToTokenIds256Mapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToTokenIdsBytes2Mapping",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToTokenIdsBytes32Mapping",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addresses10k",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addresses16",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addresses256",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressesBytes2",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressesBytes32",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_newAddresses",
          "type": "bytes"
        }
      ],
      "name": "bytes2AndAddressConcat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "bytes2ConcatAndAddressLoopConcat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_newAddresses",
          "type": "bytes"
        }
      ],
      "name": "bytes32AndAddressConcat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "bytes32ConcatAndAddressLoopConcat",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "concatBytes2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "concatBytes2ForAddressBoolIndexes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "input",
          "type": "bytes"
        }
      ],
      "name": "concatBytes32",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "flipBool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes2[]",
          "name": "input",
          "type": "bytes2[]"
        }
      ],
      "name": "loopConcatBytes2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "input",
          "type": "bytes32[]"
        }
      ],
      "name": "loopConcatBytes32",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "input",
          "type": "uint16[]"
        }
      ],
      "name": "loopPushAddressToTokenIds16BoolIndexes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "input",
          "type": "uint16[]"
        }
      ],
      "name": "loopPushMemoryUint16",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "loopPushMemoryUint256",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "input",
          "type": "uint16[]"
        }
      ],
      "name": "loopPushUint16",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "loopPushUint256",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "base",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16[]",
          "name": "input",
          "type": "uint16[]"
        }
      ],
      "name": "pushUsingMemory",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "base",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "pushUsingMemory",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "input",
          "type": "uint16[]"
        }
      ],
      "name": "tokenId16AndAddressLoopPush",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "input",
          "type": "uint16[]"
        }
      ],
      "name": "tokenId16ToAddressLoop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "tokenId256AndAddressLoopPush",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "tokenId256ToAddressLoop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "tokenIds16ToAddressMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIds256ToAddressMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "input",
          "type": "uint256[]"
        }
      ],
      "name": "updateAddressesArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xebc0e26acdde006601382d2b497290dddc1a129b4150cec8f011013f8b36b166",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2298886",
    "logsBloom": "0x
    "blockHash": "0xdf46e5e9dd242a4bee4f7d8cb850537523855a00b2f39379713332ae209099be",
    "transactionHash": "0xebc0e26acdde006601382d2b497290dddc1a129b4150cec8f011013f8b36b166",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2298886",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f37cb0314eabeddf27d6cd74dc77fd37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"abiEncodeBytes2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"abiEncodeBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"addressToBytes2Concat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"addressToBytes32Concat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"input\",\"type\":\"uint16[]\"}],\"name\":\"addressToTokenId16LoopPush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"addressToTokenId256LoopPush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToTokenIds16Mapping\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressToTokenIds256Mapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToTokenIdsBytes2Mapping\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToTokenIdsBytes32Mapping\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses10k\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses16\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses256\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesBytes2\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesBytes32\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_newAddresses\",\"type\":\"bytes\"}],\"name\":\"bytes2AndAddressConcat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"bytes2ConcatAndAddressLoopConcat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_newAddresses\",\"type\":\"bytes\"}],\"name\":\"bytes32AndAddressConcat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"bytes32ConcatAndAddressLoopConcat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"concatBytes2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"concatBytes2ForAddressBoolIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"input\",\"type\":\"bytes\"}],\"name\":\"concatBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"flipBool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes2[]\",\"name\":\"input\",\"type\":\"bytes2[]\"}],\"name\":\"loopConcatBytes2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"input\",\"type\":\"bytes32[]\"}],\"name\":\"loopConcatBytes32\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"input\",\"type\":\"uint16[]\"}],\"name\":\"loopPushAddressToTokenIds16BoolIndexes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"input\",\"type\":\"uint16[]\"}],\"name\":\"loopPushMemoryUint16\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"loopPushMemoryUint256\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"input\",\"type\":\"uint16[]\"}],\"name\":\"loopPushUint16\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"loopPushUint256\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"base\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16[]\",\"name\":\"input\",\"type\":\"uint16[]\"}],\"name\":\"pushUsingMemory\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"base\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"pushUsingMemory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"input\",\"type\":\"uint16[]\"}],\"name\":\"tokenId16AndAddressLoopPush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"input\",\"type\":\"uint16[]\"}],\"name\":\"tokenId16ToAddressLoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"tokenId256AndAddressLoopPush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"tokenId256ToAddressLoop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"tokenIds16ToAddressMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIds256ToAddressMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\"}],\"name\":\"updateAddressesArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CheckAndWriteBatchIndexesAndAddresses.sol\":\"CheckAndWriteBatchIndexesAndAddresses\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/CheckAndWriteBatchIndexesAndAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./WriteBatchIndexesAndAddresses.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract CheckAndWriteBatchIndexesAndAddresses is\\n    WriteBatchIndexesAndAddresses\\n{\\n    bool[10_000] tokenExistsBytes2;\\n    bool[10_000] tokenExistsUint16;\\n\\n    function tokenId256ToAddressLoop(uint256[] memory input)\\n        public\\n        virtual\\n        override\\n    {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            require(\\n                tokenIds256ToAddressMapping[input[i]] == address(0),\\n                \\\"ERC721: token already exists\\\"\\n            );\\n            tokenIds256ToAddressMapping[input[i]] = msg.sender;\\n        }\\n    }\\n\\n    function tokenId16ToAddressLoop(uint16[] memory input)\\n        public\\n        virtual\\n        override\\n    {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            require(\\n                tokenIds16ToAddressMapping[input[i]] == address(0),\\n                \\\"ERC721: token already exists\\\"\\n            );\\n            tokenIds16ToAddressMapping[input[i]] = msg.sender;\\n        }\\n    }\\n\\n    function addressToTokenId256LoopPush(uint256[] memory input)\\n        public\\n        virtual\\n        override\\n    {\\n        for (uint256 i = 0; i < addresses256.length; i++) {\\n            uint256[] memory tokens = addressToTokenIds256Mapping[\\n                addresses256[i]\\n            ];\\n            for (uint256 j = 0; j < tokens.length; j++) {\\n                for (uint256 k = 0; k < input.length; k++) {\\n                    require(\\n                        tokens[j] != input[k],\\n                        \\\"ERC721: token already exists\\\"\\n                    );\\n                }\\n            }\\n        }\\n        for (uint256 i = 0; i < input.length; i++) {\\n            addressToTokenIds256Mapping[msg.sender].push(input[i]);\\n        }\\n    }\\n\\n    function addressToTokenId16LoopPush(uint16[] memory input)\\n        public\\n        virtual\\n        override\\n    {\\n        for (uint256 i = 0; i < addresses256.length; i++) {\\n            uint16[] memory tokens = addressToTokenIds16Mapping[\\n                addresses256[i]\\n            ];\\n            for (uint256 j = 0; j < tokens.length; j++) {\\n                for (uint256 k = 0; k < input.length; k++) {\\n                    require(\\n                        tokens[j] != input[k],\\n                        \\\"ERC721: token already exists\\\"\\n                    );\\n                }\\n            }\\n        }\\n        for (uint256 i = 0; i < input.length; i++) {\\n            addressToTokenIds16Mapping[msg.sender].push(input[i]);\\n        }\\n    }\\n\\n    function loopPushAddressToTokenIds16BoolIndexes(uint16[] memory input)\\n        public\\n        virtual\\n    {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            require(\\n                !tokenExistsUint16[input[i]],\\n                \\\"ERC721: token already exists\\\"\\n            );\\n            addressToTokenIds16Mapping[msg.sender].push(input[i]);\\n            tokenExistsUint16[input[i]] = true;\\n        }\\n    }\\n\\n    function addressToBytes32Concat(bytes memory input)\\n        public\\n        virtual\\n        override\\n    {\\n        for (uint256 i = 0; i < addresses256.length; i++) {\\n            bytes memory tokens = addressToTokenIdsBytes32Mapping[\\n                addresses256[i]\\n            ];\\n            for (uint256 j = 0; j < tokens.length; j += 32) {\\n                for (uint256 k = 0; k < input.length; k += 32) {\\n                    require(\\n                        BytesLib.toUint256(tokens, j) !=\\n                            BytesLib.toUint256(input, k),\\n                        \\\"ERC721: token already exists\\\"\\n                    );\\n                }\\n            }\\n        }\\n        addressToTokenIdsBytes32Mapping[msg.sender] = bytes.concat(\\n            addressToTokenIdsBytes32Mapping[msg.sender],\\n            input\\n        );\\n    }\\n\\n    function addressToBytes2Concat(bytes memory input) public virtual override {\\n        for (uint256 i = 0; i < addresses16.length; i++) {\\n            bytes memory tokens = addressToTokenIdsBytes2Mapping[\\n                addresses16[i]\\n            ];\\n            for (uint256 j = 0; j < tokens.length; j += 2) {\\n                for (uint256 k = 0; k < input.length; k += 2) {\\n                    require(\\n                        BytesLib.toUint16(tokens, j) !=\\n                            BytesLib.toUint16(input, k),\\n                        \\\"ERC721: token already exists\\\"\\n                    );\\n                }\\n            }\\n        }\\n        addressToTokenIdsBytes2Mapping[msg.sender] = bytes.concat(\\n            addressToTokenIdsBytes2Mapping[msg.sender],\\n            input\\n        );\\n    }\\n\\n    function concatBytes2ForAddressBoolIndexes(bytes memory input)\\n        public\\n        virtual\\n    {\\n        for (uint256 i = 0; i < input.length; i += 2) {\\n            require(\\n                !tokenExistsBytes2[BytesLib.toUint16(input, i)],\\n                \\\"ERC721: token already exists\\\"\\n            );\\n            tokenExistsBytes2[BytesLib.toUint16(input, i)] = true;\\n        }\\n        addressToTokenIdsBytes2Mapping[msg.sender] = bytes.concat(\\n            addressToTokenIdsBytes2Mapping[msg.sender],\\n            input\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4ae59b94895f5dee23324be6712a5a2edd38dc31a448e166d068a475974a5613\",\"license\":\"MIT\"},\"contracts/WriteBatchIndexes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract WriteBatchIndexes {\\n    uint256[] tokenIdsUint256;\\n    uint16[] tokenIdsUint16;\\n    bytes tokenIdsBytes2;\\n    bytes tokenIdsBytes32;\\n    uint256 constant COLLECTION_SIZE = 10_000;\\n    bool[COLLECTION_SIZE] tokenIdsBool;\\n\\n    function pushUsingMemory(uint256[] memory base, uint256[] memory input)\\n        public\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _tmp = new uint256[](base.length + input.length);\\n        for (uint256 i = 0; i < base.length; i++) {\\n            _tmp[i] = base[i];\\n        }\\n        for (uint256 i = 0; i < input.length; i++) {\\n            _tmp[base.length + i] = input[i];\\n        }\\n        return _tmp;\\n    }\\n\\n    function pushUsingMemory(uint16[] memory base, uint16[] memory input)\\n        public\\n        pure\\n        returns (uint16[] memory)\\n    {\\n        uint16[] memory _tmp = new uint16[](base.length + input.length);\\n        for (uint256 i = 0; i < base.length; i++) {\\n            _tmp[i] = base[i];\\n        }\\n        for (uint256 i = 0; i < input.length; i++) {\\n            _tmp[base.length + i] = input[i];\\n        }\\n        return _tmp;\\n    }\\n\\n    function loopPushUint256(uint256[] memory input) public virtual {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            tokenIdsUint256.push(input[i]);\\n        }\\n    }\\n\\n    function loopPushUint16(uint16[] memory input) public virtual {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            tokenIdsUint16.push(input[i]);\\n        }\\n    }\\n\\n    function loopPushMemoryUint256(uint256[] memory input) public virtual {\\n        tokenIdsUint256 = pushUsingMemory(tokenIdsUint256, input);\\n    }\\n\\n    function loopPushMemoryUint16(uint16[] memory input) public virtual {\\n        tokenIdsUint16 = pushUsingMemory(tokenIdsUint16, input);\\n    }\\n\\n    function concatBytes2(bytes memory input) public virtual {\\n        tokenIdsBytes2 = bytes.concat(tokenIdsBytes2, input);\\n    }\\n\\n    function abiEncodeBytes2(bytes memory input) public virtual {\\n        tokenIdsBytes2 = abi.encodePacked(tokenIdsBytes2, input);\\n    }\\n\\n    function concatBytes32(bytes memory input) public virtual {\\n        tokenIdsBytes32 = bytes.concat(tokenIdsBytes32, input);\\n    }\\n\\n    function abiEncodeBytes32(bytes memory input) public virtual {\\n        tokenIdsBytes32 = abi.encodePacked(tokenIdsBytes32, input);\\n    }\\n\\n    function loopConcatBytes32(bytes32[] memory input) public virtual {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            tokenIdsBytes32 = bytes.concat(tokenIdsBytes32, input[i]);\\n        }\\n    }\\n\\n    function loopConcatBytes2(bytes2[] memory input) public virtual {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            tokenIdsBytes2 = bytes.concat(tokenIdsBytes2, input[i]);\\n        }\\n    }\\n\\n    function flipBool(uint256[] memory input) public virtual {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            tokenIdsBool[input[i]] = !tokenIdsBool[input[i]];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3e73a196fd5a9c2fb8d5bd9e7870a7a79c8c270694ddd6c1dc8f66d19e8272e\",\"license\":\"MIT\"},\"contracts/WriteBatchIndexesAndAddresses.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./WriteBatchIndexes.sol\\\";\\n\\ncontract WriteBatchIndexesAndAddresses is WriteBatchIndexes {\\n    mapping(uint256 => address) public tokenIds256ToAddressMapping;\\n    mapping(uint16 => address) public tokenIds16ToAddressMapping;\\n    mapping(address => uint256[]) public addressToTokenIds256Mapping;\\n    mapping(address => uint16[]) public addressToTokenIds16Mapping;\\n    mapping(address => bytes) public addressToTokenIdsBytes32Mapping;\\n    mapping(address => bytes) public addressToTokenIdsBytes2Mapping;\\n\\n    address[] public addresses256;\\n    address[] public addresses16;\\n    bytes public addressesBytes2;\\n    bytes public addressesBytes32;\\n    address[COLLECTION_SIZE] public addresses10k;\\n\\n    function tokenId256ToAddressLoop(uint256[] memory input) public virtual {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            tokenIds256ToAddressMapping[input[i]] = msg.sender;\\n        }\\n    }\\n\\n    function tokenId16ToAddressLoop(uint16[] memory input) public virtual {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            tokenIds16ToAddressMapping[input[i]] = msg.sender;\\n        }\\n    }\\n\\n    function addressToTokenId256LoopPush(uint256[] memory input)\\n        public\\n        virtual\\n    {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            addressToTokenIds256Mapping[msg.sender].push(input[i]);\\n        }\\n    }\\n\\n    function addressToTokenId16LoopPush(uint16[] memory input) public virtual {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            addressToTokenIds16Mapping[msg.sender].push(input[i]);\\n        }\\n    }\\n\\n    function addressToBytes32Concat(bytes memory input) public virtual {\\n        addressToTokenIdsBytes32Mapping[msg.sender] = bytes.concat(\\n            addressToTokenIdsBytes32Mapping[msg.sender],\\n            input\\n        );\\n    }\\n\\n    function addressToBytes2Concat(bytes memory input) public virtual {\\n        addressToTokenIdsBytes2Mapping[msg.sender] = bytes.concat(\\n            addressToTokenIdsBytes2Mapping[msg.sender],\\n            input\\n        );\\n    }\\n\\n    function tokenId256AndAddressLoopPush(uint256[] memory input)\\n        public\\n        virtual\\n    {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            tokenIdsUint256.push(input[i]);\\n            addresses256.push(msg.sender);\\n        }\\n    }\\n\\n    function tokenId16AndAddressLoopPush(uint16[] memory input) public virtual {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            tokenIdsUint16.push(input[i]);\\n            addresses16.push(msg.sender);\\n        }\\n    }\\n\\n    function bytes2AndAddressConcat(\\n        bytes memory input,\\n        bytes memory _newAddresses\\n    ) public virtual {\\n        tokenIdsBytes2 = bytes.concat(tokenIdsBytes2, input);\\n        addressesBytes2 = bytes.concat(addressesBytes2, _newAddresses);\\n    }\\n\\n    function bytes2ConcatAndAddressLoopConcat(bytes memory input)\\n        public\\n        virtual\\n    {\\n        tokenIdsBytes2 = bytes.concat(tokenIdsBytes2, input);\\n        for (uint256 i = 0; i < input.length; i += 2) {\\n            addressesBytes2 = bytes.concat(\\n                addressesBytes2,\\n                bytes20(msg.sender)\\n            );\\n        }\\n    }\\n\\n    function bytes32AndAddressConcat(\\n        bytes memory input,\\n        bytes memory _newAddresses\\n    ) public virtual {\\n        tokenIdsBytes32 = bytes.concat(tokenIdsBytes32, input);\\n        addressesBytes32 = bytes.concat(addressesBytes32, _newAddresses);\\n    }\\n\\n    function bytes32ConcatAndAddressLoopConcat(bytes memory input)\\n        public\\n        virtual\\n    {\\n        tokenIdsBytes32 = bytes.concat(tokenIdsBytes32, input);\\n        for (uint256 i = 0; i < input.length; i += 32) {\\n            addressesBytes32 = bytes.concat(\\n                addressesBytes32,\\n                bytes20(msg.sender)\\n            );\\n        }\\n    }\\n\\n    function updateAddressesArray(uint256[] memory input) public virtual {\\n        for (uint256 i = 0; i < input.length; i++) {\\n            addresses10k[input[i]] = msg.sender;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9168a3cf45af817f84fd9f6825db1845486a0539d4801c47b18cf17257fdefcb\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506128a6806100206000396000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c80637af910641161017b578063be755f7a116100d8578063eb9efab21161008c578063ee6e702011610071578063ee6e7020146105ca578063f5d2b32f146102e2578063feef511b146105dd57600080fd5b8063eb9efab2146105a4578063ecc83aa6146105b757600080fd5b8063ccc8d2dc116100bd578063ccc8d2dc14610568578063dbe87d2414610570578063e2e3b48c1461058357600080fd5b8063be755f7a1461052b578063c051901e1461055557600080fd5b80639b4ab2f31161012f578063aa0dd58611610114578063aa0dd586146104db578063aa4ac4d3146104ee578063b9fec3d21461050157600080fd5b80639b4ab2f3146104b3578063a52412f9146104bb57600080fd5b80638198997811610160578063819899781461047a5780638d58c82e1461048d578063953c449c146104a057600080fd5b80637af91064146104545780637eaaef101461046757600080fd5b8063382ce5a3116102295780635dd2f258116101dd5780636636fdf0116101c25780636636fdf01461040e57806366608660146104215780637042f7ba1461043457600080fd5b80635dd2f258146103fb578063602e23e8146103c257600080fd5b80634986b2891161020e5780634986b289146103c257806354e2d490146103d5578063558be69d146103e857600080fd5b8063382ce5a31461039c57806342d0297c146103af57600080fd5b80632ca1f14d1161028057806335d4ab151161026557806335d4ab151461035057806336261e251461036357806336da0aba1461037657600080fd5b80632ca1f14d1461031d578063323e11181461033d57600080fd5b80630bd0659d146102b25780630da357d1146102e25780630db3998a146102f75780632ac8bd1c1461030a575b600080fd5b6102c56102c036600461200a565b6105f0565b6040516001600160a01b0390911681526020015b60405180910390f35b6102f56102f03660046120da565b61061b565b005b6102c561030536600461200a565b610657565b6102f5610318366004612117565b610668565b61033061032b366004612197565b6106e0565b6040516102d991906121e9565b6102f561034b3660046122ab565b61077b565b6102f561035e3660046122ab565b610884565b6102f5610371366004612354565b6108d5565b610389610384366004612389565b610afd565b60405161ffff90911681526020016102d9565b6102f56103aa3660046123b3565b610b45565b6102f56103bd366004612444565b610bb5565b6102f56103d03660046120da565b610c25565b6102c56103e336600461200a565b610c5d565b6102f56103f6366004612354565b610c7f565b6102f5610409366004612117565b610d8f565b6102f561041c3660046120da565b610e02565b6102f561042f3660046120da565b610e97565b6104476104423660046124f9565b611079565b6040516102d99190612553565b6102f56104623660046122ab565b61119e565b6102f56104753660046120da565b61124d565b6102f5610488366004612354565b61138b565b6102f561049b3660046120da565b611450565b6102f56104ae3660046122ab565b6115e4565b610330611652565b6104ce6104c936600461259b565b611660565b6040516102d991906125f5565b6103306104e9366004612197565b61176d565b6102f56104fc3660046122ab565b611787565b6102c561050f36600461200a565b61013d602052600090815260409020546001600160a01b031681565b6102c561053936600461262d565b61013e602052600090815260409020546001600160a01b031681565b6102f5610563366004612354565b611824565b61033061189b565b6102f561057e3660046122ab565b6118a9565b610596610591366004612389565b611922565b6040519081526020016102d9565b6102f56105b23660046120da565b611954565b6102f56105c53660046122ab565b6119e9565b6102f56105d8366004612354565b611bbb565b6102f56105eb366004612354565b611d35565b610143818154811061060157600080fd5b6000918252602090912001546001600160a01b0316905081565b60038160405160200161062f92919061273b565b60405160208183030381529060405260039080519060200190610653929190611e97565b5050565b610144818154811061060157600080fd5b60038260405160200161067c92919061273b565b604051602081830303815290604052600390805190602001906106a0929190611e97565b50610146816040516020016106b692919061273b565b60405160208183030381529060405261014690805190602001906106db929190611e97565b505050565b61014160205260009081526040902080546106fa90612648565b80601f016020809104026020016040519081016040528092919081815260200182805461072690612648565b80156107735780601f1061074857610100808354040283529160200191610773565b820191906000526020600020905b81548152906001019060200180831161075657829003601f168201915b505050505081565b60005b81518110156106535760006001600160a01b031661013d60008484815181106107a9576107a9612760565b6020908102919091018101518252810191909152604001600020546001600160a01b03161461081f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206578697374730000000060448201526064015b60405180910390fd5b3361013d600084848151811061083757610837612760565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550808061087c9061278c565b91505061077e565b60005b81518110156106535760008282815181106108a4576108a4612760565b60209081029190910181015182546001810184556000938452919092200155806108cd8161278c565b915050610887565b60005b61014354811015610a75576000610140600061014384815481106108fe576108fe612760565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208054825181850281018501909352808352919290919083018282801561099257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116109595790505b5050505050905060005b8151811015610a605760005b8451811015610a4d578481815181106109c3576109c3612760565b602002602001015161ffff168383815181106109e1576109e1612760565b602002602001015161ffff161415610a3b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b80610a458161278c565b9150506109a8565b5080610a588161278c565b91505061099c565b50508080610a6d9061278c565b9150506108d8565b5060005b815181101561065357336000908152610140602052604090208251839083908110610aa657610aa6612760565b602090810291909101810151825460018101845560009384529190922060108204018054600f9092166002026101000a61ffff81810219909316929093169290920217905580610af58161278c565b915050610a79565b6101406020528160005260406000208181548110610b1a57600080fd5b9060005260206000209060109182820401919006600202915091509054906101000a900461ffff1681565b60005b8151811015610653576003828281518110610b6557610b65612760565b6020026020010151604051602001610b7e9291906127c5565b60405160208183030381529060405260039080519060200190610ba2929190611e97565b5080610bad8161278c565b915050610b48565b60005b8151811015610653576002828281518110610bd557610bd5612760565b6020026020010151604051602001610bee9291906127de565b60405160208183030381529060405260029080519060200190610c12929190611e97565b5080610c1d8161278c565b915050610bb8565b600281604051602001610c3992919061273b565b60405160208183030381529060405260029080519060200190610653929190611e97565b610147816127108110610c6f57600080fd5b01546001600160a01b0316905081565b60005b81518110156106535760006001600160a01b031661013e6000848481518110610cad57610cad612760565b60209081029190910181015161ffff168252810191909152604001600020546001600160a01b031614610d225760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b3361013e6000848481518110610d3a57610d3a612760565b602002602001015161ffff1661ffff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080610d879061278c565b915050610c82565b600282604051602001610da392919061273b565b60405160208183030381529060405260029080519060200190610dc7929190611e97565b5061014581604051602001610ddd92919061273b565b60405160208183030381529060405261014590805190602001906106db929190611e97565b600281604051602001610e1692919061273b565b60405160208183030381529060405260029080519060200190610e3a929190611e97565b5060005b8151811015610653576101453360601b604051602001610e5f92919061281b565b6040516020818303038152906040526101459080519060200190610e84929190611e97565b50610e90600282612858565b9050610e3e565b60005b6101435481101561102357600061014160006101438481548110610ec057610ec0612760565b60009182526020808320909101546001600160a01b0316835282019290925260400190208054610eef90612648565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1b90612648565b8015610f685780601f10610f3d57610100808354040283529160200191610f68565b820191906000526020600020905b815481529060010190602001808311610f4b57829003601f168201915b5050505050905060005b815181101561100e5760005b8451811015610ffb57610f918582611dcb565b610f9b8484611dcb565b1415610fe95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b610ff4602082612858565b9050610f7e565b50611007602082612858565b9050610f72565b5050808061101b9061278c565b915050610e9a565b5033600090815261014160209081526040918290209151611047929184910161273b565b60408051601f198184030181529181523360009081526101416020908152919020825161065393919290910190611e97565b606060008251845161108b9190612858565b67ffffffffffffffff8111156110a3576110a3612023565b6040519080825280602002602001820160405280156110cc578160200160208202803683370190505b50905060005b845181101561112c578481815181106110ed576110ed612760565b602002602001015182828151811061110757611107612760565b61ffff90921660209283029190910190910152806111248161278c565b9150506110d2565b5060005b83518110156111965783818151811061114b5761114b612760565b6020026020010151828287516111619190612858565b8151811061117157611171612760565b61ffff909216602092830291909101909101528061118e8161278c565b915050611130565b509392505050565b60005b81518110156106535760048282815181106111be576111be612760565b602002602001015161271081106111d7576111d7612760565b602091828204019190069054906101000a900460ff1615600483838151811061120257611202612760565b6020026020010151612710811061121b5761121b612760565b602091828204019190066101000a81548160ff02191690831515021790555080806112459061278c565b9150506111a1565b60005b8151811015611335576128576112668383611e31565b61ffff16612710811061127b5761127b612760565b602081049091015460ff601f9092166101000a900416156112de5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b60016128576112ed8484611e31565b61ffff16612710811061130257611302612760565b602091828204019190066101000a81548160ff02191690831515021790555060028161132e9190612858565b9050611250565b5033600090815261014260209081526040918290209151611359929184910161273b565b60408051601f198184030181529181523360009081526101426020908152919020825161065393919290910190611e97565b60005b81518110156106535760018282815181106113ab576113ab612760565b602090810291909101810151825460018082018555600094855292842060108204018054600f9092166002026101000a61ffff818102199093169290931692909202179055610144805491820181559091527fc4c2ef8194275e8aa8ec1118b6dc4bc43d1e218201f213c08c87ae45e7ea63d60180543373ffffffffffffffffffffffffffffffffffffffff19909116179055806114488161278c565b91505061138e565b60005b610144548110156113355760006101426000610144848154811061147957611479612760565b60009182526020808320909101546001600160a01b03168352820192909252604001902080546114a890612648565b80601f01602080910402602001604051908101604052809291908181526020018280546114d490612648565b80156115215780601f106114f657610100808354040283529160200191611521565b820191906000526020600020905b81548152906001019060200180831161150457829003601f168201915b5050505050905060005b81518110156115cf5760005b84518110156115bc5761154a8582611e31565b61ffff166115588484611e31565b61ffff1614156115aa5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b6115b5600282612858565b9050611537565b506115c8600282612858565b905061152b565b505080806115dc9061278c565b915050611453565b61163e600080548060200260200160405190810160405280929190818152602001828054801561163357602002820191906000526020600020905b81548152602001906001019080831161161f575b505050505082611660565b805161065391600091602090910190611f1b565b61014680546106fa90612648565b60606000825184516116729190612858565b67ffffffffffffffff81111561168a5761168a612023565b6040519080825280602002602001820160405280156116b3578160200160208202803683370190505b50905060005b845181101561170b578481815181106116d4576116d4612760565b60200260200101518282815181106116ee576116ee612760565b6020908102919091010152806117038161278c565b9150506116b9565b5060005b83518110156111965783818151811061172a5761172a612760565b6020026020010151828287516117409190612858565b8151811061175057611750612760565b6020908102919091010152806117658161278c565b91505061170f565b61014260205260009081526040902080546106fa90612648565b60005b81518110156106535760008282815181106117a7576117a7612760565b60209081029190910181015182546001818101855560009485529284200155610143805491820181559091527f90f1fbe211cc96d1ddedecd2113dc32c31d712d12ce1f36d6a07e605dcf7d53201805473ffffffffffffffffffffffffffffffffffffffff1916331790558061181c8161278c565b91505061178a565b60005b815181101561065357600182828151811061184457611844612760565b602090810291909101810151825460018101845560009384529190922060108204018054600f9092166002026101000a61ffff818102199093169290931692909202179055806118938161278c565b915050611827565b61014580546106fa90612648565b60005b815181101561065357336101478383815181106118cb576118cb612760565b602002602001015161271081106118e4576118e4612760565b01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790558061191a8161278c565b9150506118ac565b61013f602052816000526040600020818154811061193f57600080fd5b90600052602060002001600091509150505481565b60038160405160200161196892919061273b565b6040516020818303038152906040526003908051906020019061198c929190611e97565b5060005b8151811015610653576101463360601b6040516020016119b192919061281b565b60405160208183030381529060405261014690805190602001906119d6929190611e97565b506119e2602082612858565b9050611990565b60005b61014354811015611b5957600061013f60006101438481548110611a1257611a12612760565b60009182526020808320909101546001600160a01b03168352828101939093526040918201902080548251818502810185019093528083529192909190830182828015611a7e57602002820191906000526020600020905b815481526020019060010190808311611a6a575b5050505050905060005b8151811015611b445760005b8451811015611b3157848181518110611aaf57611aaf612760565b6020026020010151838381518110611ac957611ac9612760565b60200260200101511415611b1f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b80611b298161278c565b915050611a94565b5080611b3c8161278c565b915050611a88565b50508080611b519061278c565b9150506119ec565b5060005b81518110156106535733600090815261013f602052604090208251839083908110611b8a57611b8a612760565b6020908102919091018101518254600181018455600093845291909220015580611bb38161278c565b915050611b5d565b60005b815181101561065357612990828281518110611bdc57611bdc612760565b602002602001015161ffff166127108110611bf957611bf9612760565b602081049091015460ff601f9092166101000a90041615611c5c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b336000908152610140602052604090208251839083908110611c8057611c80612760565b602002602001015190806001815401808255809150506001900390600052602060002090601091828204019190066002029091909190916101000a81548161ffff021916908361ffff1602179055506001612990838381518110611ce657611ce6612760565b602002602001015161ffff166127108110611d0357611d03612760565b602091828204019190066101000a81548160ff0219169083151502179055508080611d2d9061278c565b915050611bbe565b611db76001805480602002602001604051908101604052809291908181526020018280548015611dac57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611d735790505b505050505082611079565b805161065391600191602090910190611f55565b6000611dd8826020612858565b83511015611e285760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e647300000000000000000000006044820152606401610816565b50016020015190565b6000611e3e826002612858565b83511015611e8e5760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e64730000000000000000000000006044820152606401610816565b50016002015190565b828054611ea390612648565b90600052602060002090601f016020900481019282611ec55760008555611f0b565b82601f10611ede57805160ff1916838001178555611f0b565b82800160010185558215611f0b579182015b82811115611f0b578251825591602001919060010190611ef0565b50611f17929150611ff5565b5090565b828054828255906000526020600020908101928215611f0b5791602002820182811115611f0b578251825591602001919060010190611ef0565b82805482825590600052602060002090600f01601090048101928215611f0b5791602002820160005b83821115611fbe57835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302611f7e565b8015611fec5782816101000a81549061ffff0219169055600201602081600101049283019260010302611fbe565b5050611f179291505b5b80821115611f175760008155600101611ff6565b60006020828403121561201c57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561206257612062612023565b604052919050565b600082601f83011261207b57600080fd5b813567ffffffffffffffff81111561209557612095612023565b6120a86020601f19601f84011601612039565b8181528460208386010111156120bd57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156120ec57600080fd5b813567ffffffffffffffff81111561210357600080fd5b61210f8482850161206a565b949350505050565b6000806040838503121561212a57600080fd5b823567ffffffffffffffff8082111561214257600080fd5b61214e8683870161206a565b9350602085013591508082111561216457600080fd5b506121718582860161206a565b9150509250929050565b80356001600160a01b038116811461219257600080fd5b919050565b6000602082840312156121a957600080fd5b6121b28261217b565b9392505050565b60005b838110156121d45781810151838201526020016121bc565b838111156121e3576000848401525b50505050565b60208152600082518060208401526122088160408501602087016121b9565b601f01601f19169190910160400192915050565b600067ffffffffffffffff82111561223657612236612023565b5060051b60200190565b600082601f83011261225157600080fd5b813560206122666122618361221c565b612039565b82815260059290921b8401810191818101908684111561228557600080fd5b8286015b848110156122a05780358352918301918301612289565b509695505050505050565b6000602082840312156122bd57600080fd5b813567ffffffffffffffff8111156122d457600080fd5b61210f84828501612240565b803561ffff8116811461219257600080fd5b600082601f83011261230357600080fd5b813560206123136122618361221c565b82815260059290921b8401810191818101908684111561233257600080fd5b8286015b848110156122a057612347816122e0565b8352918301918301612336565b60006020828403121561236657600080fd5b813567ffffffffffffffff81111561237d57600080fd5b61210f848285016122f2565b6000806040838503121561239c57600080fd5b6123a58361217b565b946020939093013593505050565b600060208083850312156123c657600080fd5b823567ffffffffffffffff8111156123dd57600080fd5b8301601f810185136123ee57600080fd5b80356123fc6122618261221c565b81815260059190911b8201830190838101908783111561241b57600080fd5b928401925b8284101561243957833582529284019290840190612420565b979650505050505050565b6000602080838503121561245757600080fd5b823567ffffffffffffffff81111561246e57600080fd5b8301601f8101851361247f57600080fd5b803561248d6122618261221c565b81815260059190911b820183019083810190878311156124ac57600080fd5b928401925b828410156124395783357fffff000000000000000000000000000000000000000000000000000000000000811681146124ea5760008081fd5b825292840192908401906124b1565b6000806040838503121561250c57600080fd5b823567ffffffffffffffff8082111561252457600080fd5b612530868387016122f2565b9350602085013591508082111561254657600080fd5b50612171858286016122f2565b6020808252825182820181905260009190848201906040850190845b8181101561258f57835161ffff168352928401929184019160010161256f565b50909695505050505050565b600080604083850312156125ae57600080fd5b823567ffffffffffffffff808211156125c657600080fd5b6125d286838701612240565b935060208501359150808211156125e857600080fd5b5061217185828601612240565b6020808252825182820181905260009190848201906040850190845b8181101561258f57835183529284019291840191600101612611565b60006020828403121561263f57600080fd5b6121b2826122e0565b600181811c9082168061265c57607f821691505b6020821081141561267d57634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c908083168061269d57607f831692505b60208084108214156126bf57634e487b7160e01b600052602260045260246000fd5b8180156126d357600181146127025761272f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0086168952848901965061272f565b60008881526020902060005b868110156127275781548b82015290850190830161270e565b505084890196505b50505050505092915050565b60006127478285612683565b83516127578183602088016121b9565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127be576127be612776565b5060010190565b60006127d18285612683565b9283525050602001919050565b60006127ea8285612683565b7fffff0000000000000000000000000000000000000000000000000000000000009390931683525050600201919050565b60006128278285612683565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009390931683525050601401919050565b6000821982111561286b5761286b612776565b50019056fea264697066735822122061d05981429aa3f946a111b70bffd607217938def4a383f927d720c4df19944c64736f6c63430008080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ad5760003560e01c80637af910641161017b578063be755f7a116100d8578063eb9efab21161008c578063ee6e702011610071578063ee6e7020146105ca578063f5d2b32f146102e2578063feef511b146105dd57600080fd5b8063eb9efab2146105a4578063ecc83aa6146105b757600080fd5b8063ccc8d2dc116100bd578063ccc8d2dc14610568578063dbe87d2414610570578063e2e3b48c1461058357600080fd5b8063be755f7a1461052b578063c051901e1461055557600080fd5b80639b4ab2f31161012f578063aa0dd58611610114578063aa0dd586146104db578063aa4ac4d3146104ee578063b9fec3d21461050157600080fd5b80639b4ab2f3146104b3578063a52412f9146104bb57600080fd5b80638198997811610160578063819899781461047a5780638d58c82e1461048d578063953c449c146104a057600080fd5b80637af91064146104545780637eaaef101461046757600080fd5b8063382ce5a3116102295780635dd2f258116101dd5780636636fdf0116101c25780636636fdf01461040e57806366608660146104215780637042f7ba1461043457600080fd5b80635dd2f258146103fb578063602e23e8146103c257600080fd5b80634986b2891161020e5780634986b289146103c257806354e2d490146103d5578063558be69d146103e857600080fd5b8063382ce5a31461039c57806342d0297c146103af57600080fd5b80632ca1f14d1161028057806335d4ab151161026557806335d4ab151461035057806336261e251461036357806336da0aba1461037657600080fd5b80632ca1f14d1461031d578063323e11181461033d57600080fd5b80630bd0659d146102b25780630da357d1146102e25780630db3998a146102f75780632ac8bd1c1461030a575b600080fd5b6102c56102c036600461200a565b6105f0565b6040516001600160a01b0390911681526020015b60405180910390f35b6102f56102f03660046120da565b61061b565b005b6102c561030536600461200a565b610657565b6102f5610318366004612117565b610668565b61033061032b366004612197565b6106e0565b6040516102d991906121e9565b6102f561034b3660046122ab565b61077b565b6102f561035e3660046122ab565b610884565b6102f5610371366004612354565b6108d5565b610389610384366004612389565b610afd565b60405161ffff90911681526020016102d9565b6102f56103aa3660046123b3565b610b45565b6102f56103bd366004612444565b610bb5565b6102f56103d03660046120da565b610c25565b6102c56103e336600461200a565b610c5d565b6102f56103f6366004612354565b610c7f565b6102f5610409366004612117565b610d8f565b6102f561041c3660046120da565b610e02565b6102f561042f3660046120da565b610e97565b6104476104423660046124f9565b611079565b6040516102d99190612553565b6102f56104623660046122ab565b61119e565b6102f56104753660046120da565b61124d565b6102f5610488366004612354565b61138b565b6102f561049b3660046120da565b611450565b6102f56104ae3660046122ab565b6115e4565b610330611652565b6104ce6104c936600461259b565b611660565b6040516102d991906125f5565b6103306104e9366004612197565b61176d565b6102f56104fc3660046122ab565b611787565b6102c561050f36600461200a565b61013d602052600090815260409020546001600160a01b031681565b6102c561053936600461262d565b61013e602052600090815260409020546001600160a01b031681565b6102f5610563366004612354565b611824565b61033061189b565b6102f561057e3660046122ab565b6118a9565b610596610591366004612389565b611922565b6040519081526020016102d9565b6102f56105b23660046120da565b611954565b6102f56105c53660046122ab565b6119e9565b6102f56105d8366004612354565b611bbb565b6102f56105eb366004612354565b611d35565b610143818154811061060157600080fd5b6000918252602090912001546001600160a01b0316905081565b60038160405160200161062f92919061273b565b60405160208183030381529060405260039080519060200190610653929190611e97565b5050565b610144818154811061060157600080fd5b60038260405160200161067c92919061273b565b604051602081830303815290604052600390805190602001906106a0929190611e97565b50610146816040516020016106b692919061273b565b60405160208183030381529060405261014690805190602001906106db929190611e97565b505050565b61014160205260009081526040902080546106fa90612648565b80601f016020809104026020016040519081016040528092919081815260200182805461072690612648565b80156107735780601f1061074857610100808354040283529160200191610773565b820191906000526020600020905b81548152906001019060200180831161075657829003601f168201915b505050505081565b60005b81518110156106535760006001600160a01b031661013d60008484815181106107a9576107a9612760565b6020908102919091018101518252810191909152604001600020546001600160a01b03161461081f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206578697374730000000060448201526064015b60405180910390fd5b3361013d600084848151811061083757610837612760565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550808061087c9061278c565b91505061077e565b60005b81518110156106535760008282815181106108a4576108a4612760565b60209081029190910181015182546001810184556000938452919092200155806108cd8161278c565b915050610887565b60005b61014354811015610a75576000610140600061014384815481106108fe576108fe612760565b60009182526020808320909101546001600160a01b0316835282810193909352604091820190208054825181850281018501909352808352919290919083018282801561099257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116109595790505b5050505050905060005b8151811015610a605760005b8451811015610a4d578481815181106109c3576109c3612760565b602002602001015161ffff168383815181106109e1576109e1612760565b602002602001015161ffff161415610a3b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b80610a458161278c565b9150506109a8565b5080610a588161278c565b91505061099c565b50508080610a6d9061278c565b9150506108d8565b5060005b815181101561065357336000908152610140602052604090208251839083908110610aa657610aa6612760565b602090810291909101810151825460018101845560009384529190922060108204018054600f9092166002026101000a61ffff81810219909316929093169290920217905580610af58161278c565b915050610a79565b6101406020528160005260406000208181548110610b1a57600080fd5b9060005260206000209060109182820401919006600202915091509054906101000a900461ffff1681565b60005b8151811015610653576003828281518110610b6557610b65612760565b6020026020010151604051602001610b7e9291906127c5565b60405160208183030381529060405260039080519060200190610ba2929190611e97565b5080610bad8161278c565b915050610b48565b60005b8151811015610653576002828281518110610bd557610bd5612760565b6020026020010151604051602001610bee9291906127de565b60405160208183030381529060405260029080519060200190610c12929190611e97565b5080610c1d8161278c565b915050610bb8565b600281604051602001610c3992919061273b565b60405160208183030381529060405260029080519060200190610653929190611e97565b610147816127108110610c6f57600080fd5b01546001600160a01b0316905081565b60005b81518110156106535760006001600160a01b031661013e6000848481518110610cad57610cad612760565b60209081029190910181015161ffff168252810191909152604001600020546001600160a01b031614610d225760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b3361013e6000848481518110610d3a57610d3a612760565b602002602001015161ffff1661ffff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508080610d879061278c565b915050610c82565b600282604051602001610da392919061273b565b60405160208183030381529060405260029080519060200190610dc7929190611e97565b5061014581604051602001610ddd92919061273b565b60405160208183030381529060405261014590805190602001906106db929190611e97565b600281604051602001610e1692919061273b565b60405160208183030381529060405260029080519060200190610e3a929190611e97565b5060005b8151811015610653576101453360601b604051602001610e5f92919061281b565b6040516020818303038152906040526101459080519060200190610e84929190611e97565b50610e90600282612858565b9050610e3e565b60005b6101435481101561102357600061014160006101438481548110610ec057610ec0612760565b60009182526020808320909101546001600160a01b0316835282019290925260400190208054610eef90612648565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1b90612648565b8015610f685780601f10610f3d57610100808354040283529160200191610f68565b820191906000526020600020905b815481529060010190602001808311610f4b57829003601f168201915b5050505050905060005b815181101561100e5760005b8451811015610ffb57610f918582611dcb565b610f9b8484611dcb565b1415610fe95760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b610ff4602082612858565b9050610f7e565b50611007602082612858565b9050610f72565b5050808061101b9061278c565b915050610e9a565b5033600090815261014160209081526040918290209151611047929184910161273b565b60408051601f198184030181529181523360009081526101416020908152919020825161065393919290910190611e97565b606060008251845161108b9190612858565b67ffffffffffffffff8111156110a3576110a3612023565b6040519080825280602002602001820160405280156110cc578160200160208202803683370190505b50905060005b845181101561112c578481815181106110ed576110ed612760565b602002602001015182828151811061110757611107612760565b61ffff90921660209283029190910190910152806111248161278c565b9150506110d2565b5060005b83518110156111965783818151811061114b5761114b612760565b6020026020010151828287516111619190612858565b8151811061117157611171612760565b61ffff909216602092830291909101909101528061118e8161278c565b915050611130565b509392505050565b60005b81518110156106535760048282815181106111be576111be612760565b602002602001015161271081106111d7576111d7612760565b602091828204019190069054906101000a900460ff1615600483838151811061120257611202612760565b6020026020010151612710811061121b5761121b612760565b602091828204019190066101000a81548160ff02191690831515021790555080806112459061278c565b9150506111a1565b60005b8151811015611335576128576112668383611e31565b61ffff16612710811061127b5761127b612760565b602081049091015460ff601f9092166101000a900416156112de5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b60016128576112ed8484611e31565b61ffff16612710811061130257611302612760565b602091828204019190066101000a81548160ff02191690831515021790555060028161132e9190612858565b9050611250565b5033600090815261014260209081526040918290209151611359929184910161273b565b60408051601f198184030181529181523360009081526101426020908152919020825161065393919290910190611e97565b60005b81518110156106535760018282815181106113ab576113ab612760565b602090810291909101810151825460018082018555600094855292842060108204018054600f9092166002026101000a61ffff818102199093169290931692909202179055610144805491820181559091527fc4c2ef8194275e8aa8ec1118b6dc4bc43d1e218201f213c08c87ae45e7ea63d60180543373ffffffffffffffffffffffffffffffffffffffff19909116179055806114488161278c565b91505061138e565b60005b610144548110156113355760006101426000610144848154811061147957611479612760565b60009182526020808320909101546001600160a01b03168352820192909252604001902080546114a890612648565b80601f01602080910402602001604051908101604052809291908181526020018280546114d490612648565b80156115215780601f106114f657610100808354040283529160200191611521565b820191906000526020600020905b81548152906001019060200180831161150457829003601f168201915b5050505050905060005b81518110156115cf5760005b84518110156115bc5761154a8582611e31565b61ffff166115588484611e31565b61ffff1614156115aa5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b6115b5600282612858565b9050611537565b506115c8600282612858565b905061152b565b505080806115dc9061278c565b915050611453565b61163e600080548060200260200160405190810160405280929190818152602001828054801561163357602002820191906000526020600020905b81548152602001906001019080831161161f575b505050505082611660565b805161065391600091602090910190611f1b565b61014680546106fa90612648565b60606000825184516116729190612858565b67ffffffffffffffff81111561168a5761168a612023565b6040519080825280602002602001820160405280156116b3578160200160208202803683370190505b50905060005b845181101561170b578481815181106116d4576116d4612760565b60200260200101518282815181106116ee576116ee612760565b6020908102919091010152806117038161278c565b9150506116b9565b5060005b83518110156111965783818151811061172a5761172a612760565b6020026020010151828287516117409190612858565b8151811061175057611750612760565b6020908102919091010152806117658161278c565b91505061170f565b61014260205260009081526040902080546106fa90612648565b60005b81518110156106535760008282815181106117a7576117a7612760565b60209081029190910181015182546001818101855560009485529284200155610143805491820181559091527f90f1fbe211cc96d1ddedecd2113dc32c31d712d12ce1f36d6a07e605dcf7d53201805473ffffffffffffffffffffffffffffffffffffffff1916331790558061181c8161278c565b91505061178a565b60005b815181101561065357600182828151811061184457611844612760565b602090810291909101810151825460018101845560009384529190922060108204018054600f9092166002026101000a61ffff818102199093169290931692909202179055806118938161278c565b915050611827565b61014580546106fa90612648565b60005b815181101561065357336101478383815181106118cb576118cb612760565b602002602001015161271081106118e4576118e4612760565b01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790558061191a8161278c565b9150506118ac565b61013f602052816000526040600020818154811061193f57600080fd5b90600052602060002001600091509150505481565b60038160405160200161196892919061273b565b6040516020818303038152906040526003908051906020019061198c929190611e97565b5060005b8151811015610653576101463360601b6040516020016119b192919061281b565b60405160208183030381529060405261014690805190602001906119d6929190611e97565b506119e2602082612858565b9050611990565b60005b61014354811015611b5957600061013f60006101438481548110611a1257611a12612760565b60009182526020808320909101546001600160a01b03168352828101939093526040918201902080548251818502810185019093528083529192909190830182828015611a7e57602002820191906000526020600020905b815481526020019060010190808311611a6a575b5050505050905060005b8151811015611b445760005b8451811015611b3157848181518110611aaf57611aaf612760565b6020026020010151838381518110611ac957611ac9612760565b60200260200101511415611b1f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b80611b298161278c565b915050611a94565b5080611b3c8161278c565b915050611a88565b50508080611b519061278c565b9150506119ec565b5060005b81518110156106535733600090815261013f602052604090208251839083908110611b8a57611b8a612760565b6020908102919091018101518254600181018455600093845291909220015580611bb38161278c565b915050611b5d565b60005b815181101561065357612990828281518110611bdc57611bdc612760565b602002602001015161ffff166127108110611bf957611bf9612760565b602081049091015460ff601f9092166101000a90041615611c5c5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c726561647920657869737473000000006044820152606401610816565b336000908152610140602052604090208251839083908110611c8057611c80612760565b602002602001015190806001815401808255809150506001900390600052602060002090601091828204019190066002029091909190916101000a81548161ffff021916908361ffff1602179055506001612990838381518110611ce657611ce6612760565b602002602001015161ffff166127108110611d0357611d03612760565b602091828204019190066101000a81548160ff0219169083151502179055508080611d2d9061278c565b915050611bbe565b611db76001805480602002602001604051908101604052809291908181526020018280548015611dac57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611d735790505b505050505082611079565b805161065391600191602090910190611f55565b6000611dd8826020612858565b83511015611e285760405162461bcd60e51b815260206004820152601560248201527f746f55696e743235365f6f75744f66426f756e647300000000000000000000006044820152606401610816565b50016020015190565b6000611e3e826002612858565b83511015611e8e5760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e64730000000000000000000000006044820152606401610816565b50016002015190565b828054611ea390612648565b90600052602060002090601f016020900481019282611ec55760008555611f0b565b82601f10611ede57805160ff1916838001178555611f0b565b82800160010185558215611f0b579182015b82811115611f0b578251825591602001919060010190611ef0565b50611f17929150611ff5565b5090565b828054828255906000526020600020908101928215611f0b5791602002820182811115611f0b578251825591602001919060010190611ef0565b82805482825590600052602060002090600f01601090048101928215611f0b5791602002820160005b83821115611fbe57835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302611f7e565b8015611fec5782816101000a81549061ffff0219169055600201602081600101049283019260010302611fbe565b5050611f179291505b5b80821115611f175760008155600101611ff6565b60006020828403121561201c57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561206257612062612023565b604052919050565b600082601f83011261207b57600080fd5b813567ffffffffffffffff81111561209557612095612023565b6120a86020601f19601f84011601612039565b8181528460208386010111156120bd57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156120ec57600080fd5b813567ffffffffffffffff81111561210357600080fd5b61210f8482850161206a565b949350505050565b6000806040838503121561212a57600080fd5b823567ffffffffffffffff8082111561214257600080fd5b61214e8683870161206a565b9350602085013591508082111561216457600080fd5b506121718582860161206a565b9150509250929050565b80356001600160a01b038116811461219257600080fd5b919050565b6000602082840312156121a957600080fd5b6121b28261217b565b9392505050565b60005b838110156121d45781810151838201526020016121bc565b838111156121e3576000848401525b50505050565b60208152600082518060208401526122088160408501602087016121b9565b601f01601f19169190910160400192915050565b600067ffffffffffffffff82111561223657612236612023565b5060051b60200190565b600082601f83011261225157600080fd5b813560206122666122618361221c565b612039565b82815260059290921b8401810191818101908684111561228557600080fd5b8286015b848110156122a05780358352918301918301612289565b509695505050505050565b6000602082840312156122bd57600080fd5b813567ffffffffffffffff8111156122d457600080fd5b61210f84828501612240565b803561ffff8116811461219257600080fd5b600082601f83011261230357600080fd5b813560206123136122618361221c565b82815260059290921b8401810191818101908684111561233257600080fd5b8286015b848110156122a057612347816122e0565b8352918301918301612336565b60006020828403121561236657600080fd5b813567ffffffffffffffff81111561237d57600080fd5b61210f848285016122f2565b6000806040838503121561239c57600080fd5b6123a58361217b565b946020939093013593505050565b600060208083850312156123c657600080fd5b823567ffffffffffffffff8111156123dd57600080fd5b8301601f810185136123ee57600080fd5b80356123fc6122618261221c565b81815260059190911b8201830190838101908783111561241b57600080fd5b928401925b8284101561243957833582529284019290840190612420565b979650505050505050565b6000602080838503121561245757600080fd5b823567ffffffffffffffff81111561246e57600080fd5b8301601f8101851361247f57600080fd5b803561248d6122618261221c565b81815260059190911b820183019083810190878311156124ac57600080fd5b928401925b828410156124395783357fffff000000000000000000000000000000000000000000000000000000000000811681146124ea5760008081fd5b825292840192908401906124b1565b6000806040838503121561250c57600080fd5b823567ffffffffffffffff8082111561252457600080fd5b612530868387016122f2565b9350602085013591508082111561254657600080fd5b50612171858286016122f2565b6020808252825182820181905260009190848201906040850190845b8181101561258f57835161ffff168352928401929184019160010161256f565b50909695505050505050565b600080604083850312156125ae57600080fd5b823567ffffffffffffffff808211156125c657600080fd5b6125d286838701612240565b935060208501359150808211156125e857600080fd5b5061217185828601612240565b6020808252825182820181905260009190848201906040850190845b8181101561258f57835183529284019291840191600101612611565b60006020828403121561263f57600080fd5b6121b2826122e0565b600181811c9082168061265c57607f821691505b6020821081141561267d57634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c908083168061269d57607f831692505b60208084108214156126bf57634e487b7160e01b600052602260045260246000fd5b8180156126d357600181146127025761272f565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0086168952848901965061272f565b60008881526020902060005b868110156127275781548b82015290850190830161270e565b505084890196505b50505050505092915050565b60006127478285612683565b83516127578183602088016121b9565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127be576127be612776565b5060010190565b60006127d18285612683565b9283525050602001919050565b60006127ea8285612683565b7fffff0000000000000000000000000000000000000000000000000000000000009390931683525050600201919050565b60006128278285612683565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009390931683525050601401919050565b6000821982111561286b5761286b612776565b50019056fea264697066735822122061d05981429aa3f946a111b70bffd607217938def4a383f927d720c4df19944c64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2488,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "tokenIdsUint256",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2491,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "tokenIdsUint16",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint16)dyn_storage"
      },
      {
        "astId": 2493,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "tokenIdsBytes2",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2495,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "tokenIdsBytes32",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2502,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "tokenIdsBool",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bool)10000_storage"
      },
      {
        "astId": 2899,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "tokenIds256ToAddressMapping",
        "offset": 0,
        "slot": "317",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2903,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "tokenIds16ToAddressMapping",
        "offset": 0,
        "slot": "318",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 2908,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "addressToTokenIds256Mapping",
        "offset": 0,
        "slot": "319",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 2913,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "addressToTokenIds16Mapping",
        "offset": 0,
        "slot": "320",
        "type": "t_mapping(t_address,t_array(t_uint16)dyn_storage)"
      },
      {
        "astId": 2917,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "addressToTokenIdsBytes32Mapping",
        "offset": 0,
        "slot": "321",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 2921,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "addressToTokenIdsBytes2Mapping",
        "offset": 0,
        "slot": "322",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 2924,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "addresses256",
        "offset": 0,
        "slot": "323",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2927,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "addresses16",
        "offset": 0,
        "slot": "324",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2929,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "addressesBytes2",
        "offset": 0,
        "slot": "325",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2931,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "addressesBytes32",
        "offset": 0,
        "slot": "326",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2935,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "addresses10k",
        "offset": 0,
        "slot": "327",
        "type": "t_array(t_address)10000_storage"
      },
      {
        "astId": 1929,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "tokenExistsBytes2",
        "offset": 0,
        "slot": "10327",
        "type": "t_array(t_bool)10000_storage"
      },
      {
        "astId": 1933,
        "contract": "contracts/CheckAndWriteBatchIndexesAndAddresses.sol:CheckAndWriteBatchIndexesAndAddresses",
        "label": "tokenExistsUint16",
        "offset": 0,
        "slot": "10640",
        "type": "t_array(t_bool)10000_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)10000_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[10000]",
        "numberOfBytes": "320000"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bool)10000_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[10000]",
        "numberOfBytes": "10016"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint16)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint16)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}