{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_NUMBER_OF_TOKENS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getOwnerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenExists",
      "outputs": [
        {
          "internalType": "bool[10000]",
          "name": "",
          "type": "bool[10000]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "tokenIds",
          "type": "bytes"
        }
      ],
      "name": "safeMintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenIndex",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdba90e6821e43e9fab110f28350a05d827f9ed0b499c806994eed89f4dd712c6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "3045277",
    "logsBloom": "0x
    "blockHash": "0x8384f4a8d3c572a52fe41ff2ee8c70b7dc191f4e37c4b912f82953bef9ce71bc",
    "transactionHash": "0xdba90e6821e43e9fab110f28350a05d827f9ed0b499c806994eed89f4dd712c6",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "3045277",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Dreamers",
    "DRE"
  ],
  "numDeployments": 1,
  "solcInputHash": "f37cb0314eabeddf27d6cd74dc77fd37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_NUMBER_OF_TOKENS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getOwnerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenExists\",\"outputs\":[{\"internalType\":\"bool[10000]\",\"name\":\"\",\"type\":\"bool[10000]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"tokenIds\",\"type\":\"bytes\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data      We use the uint16 / bytes2 tokenId\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"approve(address,uint256,uint256)\":{\"details\":\"Approve \\\"to\\\" to manage token Id\",\"params\":{\"to\":\"address The address which will manage the token Id\",\"tokenId\":\"uint256 The token Id to manage\",\"tokenIndex\":\"uint256 The index of the token in the owner's list\"}},\"balanceOf(address)\":{\"details\":\"There are two bytes per tokenId\",\"params\":{\"owner\":\"address The address we retrieve the balance for\"},\"returns\":{\"_0\":\"uint256 The number of tokens owned by the address\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getOwnerIndex(address)\":{\"details\":\"Returns the index of owner in the internal array of owners. Revert if not found.\",\"params\":{\"owner\":\"address The address we retrieve the index for\"},\"returns\":{\"_0\":\"uint256 The index of the owner in the internal owners array\"}},\"getTokenExists()\":{\"details\":\"Returns the array of bool telling if a token exists or not.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns whether `operator` is an approved operator for the caller.\",\"params\":{\"operator\":\"The address of the operator to check.\",\"owner\":\"The address of the owner to check.\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.\",\"params\":{\"tokenId\":\"uint265 A given token id\"},\"returns\":{\"_0\":\"address The owner of the token.\"}},\"safeMintBatch(bytes)\":{\"details\":\"Add a batch of token Ids given as a bytes array to the sender\",\"params\":{\"tokenIds\":\"bytes a bytes of tokenIds as bytes2 (uint16)\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,uint256,address,uint256)\":{\"details\":\"Transfer token with minimal computing since all the required data to check is given\",\"params\":{\"from\":\"address The address which you want to transfer the token from\",\"fromIndex\":\"uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\",\"to\":\"address The address which you want to transfer the token to\",\"tokenIndex\":\"uint256 The index of the token to transfer in the from's token list.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\",\"params\":{\"_approved\":\"Whether to add or remove `operator` as an operator.\",\"operator\":\"The address of the operator to add or remove.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenByIndex(uint256)\":{\"details\":\"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"details\":\"Returns the total amount of tokens stored by the contract.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token optimized for batch minting with enumerable interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/ERC721BEnumerable.sol\":\"ERC721BEnumerable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/tokens/ERC721B.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token optimized for batch minting\\n * @notice a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data\\n *      We use the uint16 / bytes2 tokenId\\n */\\ncontract ERC721B is IERC721, IERC721Metadata, Context, ERC165 {\\n    using Address for address;\\n\\n    // Mapping from address to tokenIds. This is the single source of truth for the data\\n    mapping(address => bytes) internal _tokensByOwner;\\n\\n    // Because mapping in solidity are not real hash tables, one needs to keep track of the keys.\\n    // One address is 20 bytes\\n    bytes internal owners;\\n\\n    // Number of tokens\\n    uint16 public constant MAX_NUMBER_OF_TOKENS = 10_000;\\n\\n    // Bool array to store if the token is minted. To save on gas for token lookup in _tokensByOwner.\\n    bool[MAX_NUMBER_OF_TOKENS] public tokenExists;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint16 => address) internal _tokenApprovals;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() external view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev There are two bytes per tokenId\\n     * @param owner address The address we retrieve the balance for\\n     * @return uint256 The number of tokens owned by the address\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        return _tokensByOwner[owner].length / 2;\\n    }\\n\\n    /// @dev Returns the balance of the owner at index ownerIndex in the internal owners array\\n    /// @param ownerIndex uint256 The index of the owner in the internal owners array\\n    /// @return uint256 The number of tokens owned by the address\\n    function _balanceOf(uint256 ownerIndex) internal view returns (uint256) {\\n        require(\\n            ownerIndex * 20 < owners.length,\\n            \\\"ERC721B: ownerIndex out of bound\\\"\\n        );\\n        return balanceOf(BytesLib.toAddress(owners, ownerIndex * 20));\\n    }\\n\\n    /// @dev Returns the index of owner in the internal array of owners. Revert if not found.\\n    /// @param owner address The address we retrieve the index for\\n    /// @return uint256 The index of the owner in the internal owners array\\n    function getOwnerIndex(address owner) external view returns (uint256) {\\n        uint256 index = 0;\\n        while (index < owners.length) {\\n            if (BytesLib.toAddress(owners, index) == owner) {\\n                return index / 20;\\n            }\\n            index += 20;\\n        }\\n        revert(\\\"ERC721B: Owner not found\\\");\\n    }\\n\\n    /// @dev Returns the array of bool telling if a token exists or not.\\n    function getTokenExists()\\n        external\\n        view\\n        returns (bool[MAX_NUMBER_OF_TOKENS] memory)\\n    {\\n        return tokenExists;\\n    }\\n\\n    /**\\n     * @param tokenId uint16 A given token id\\n     * @return bool True if the token exists, false otherwise\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return tokenExists[tokenId];\\n    }\\n\\n    /**\\n     * @dev This is copied from OpenZeppelin's implementation\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try\\n                IERC721Receiver(to).onERC721Received(\\n                    _msgSender(),\\n                    from,\\n                    tokenId,\\n                    _data\\n                )\\n            returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\n                        \\\"ERC721B: transfer to non ERC721Receiver implementer\\\"\\n                    );\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev This is the core unsafe implementation of a transfer.\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function _transfer(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) private {\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        bytes memory tokenId = BytesLib.slice(\\n            _tokensByOwner[from],\\n            tokenIndex,\\n            tokenIndex + 2\\n        );\\n        if (_tokensByOwner[from].length == 2) {\\n            require(\\n                BytesLib.toAddress(owners, fromIndex * 20) == from,\\n                \\\"ERC721B: transfer from address is invalid\\\"\\n            );\\n            owners = bytes.concat(\\n                BytesLib.slice(owners, 0, fromIndex * 20),\\n                BytesLib.slice(\\n                    owners,\\n                    (fromIndex + 1) * 20,\\n                    owners.length - (fromIndex + 1) * 20\\n                )\\n            );\\n            delete _tokensByOwner[from];\\n        } else {\\n            _tokensByOwner[from] = bytes.concat(\\n                BytesLib.slice(_tokensByOwner[from], 0, tokenIndex),\\n                BytesLib.slice(\\n                    _tokensByOwner[from],\\n                    tokenIndex + 2,\\n                    _tokensByOwner[from].length - tokenIndex - 2\\n                )\\n            );\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenId);\\n        emit Transfer(from, to, BytesLib.toUint16(tokenId, 0));\\n    }\\n\\n    /// @dev Transfer token with minimal computing since all the required data to check is given\\n    /// @param from address The address which you want to transfer the token from\\n    /// @param fromIndex uint256 The index of \\\"from\\\" in the owners bytes. This is to avoid a search in the array.\\n    /// @param to address The address which you want to transfer the token to\\n    /// @param tokenIndex uint256 The index of the token to transfer in the from's token list.\\n    function safeTransferFrom(\\n        address from,\\n        uint256 fromIndex,\\n        address to,\\n        uint256 tokenIndex\\n    ) external {\\n        require(from != address(0), \\\"ERC721B: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721B: to cannot be the zero address\\\");\\n        require(\\n            tokenIndex < _tokensByOwner[from].length / 2,\\n            \\\"ERC721B: token index out of range\\\"\\n        );\\n        uint16 tokenId = BytesLib.toUint16(\\n            _tokensByOwner[from],\\n            tokenIndex * 2\\n        );\\n        require(\\n            _isApproved(_msgSender(), tokenId) || from == _msgSender(),\\n            \\\"ERC721B: transfer caller is not owner nor approved\\\"\\n        );\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev This is the core unsafe implementation of a mint.\\n     * @param to address The receiver of the tokens\\n     * @param tokenIds bytes The token ids to mint\\n     */\\n    function _mintBatch(address to, bytes calldata tokenIds) private {\\n        require(tokenIds.length > 0, \\\"ERC721B: cannot mint with no token Ids\\\");\\n        require(\\n            tokenIds.length % 2 == 0,\\n            \\\"ERC721B: tokenIds should be bytes of uint16\\\"\\n        );\\n        if (_tokensByOwner[to].length == 0) {\\n            owners = bytes.concat(owners, bytes20(to));\\n        }\\n        for (uint256 i = 0; i < tokenIds.length; i += 2) {\\n            require(\\n                !tokenExists[BytesLib.toUint16(tokenIds, i)],\\n                \\\"ERC721B: token already exists\\\"\\n            );\\n            tokenExists[BytesLib.toUint16(tokenIds, i)] = true;\\n            emit Transfer(address(0), to, BytesLib.toUint16(tokenIds, i));\\n        }\\n        _tokensByOwner[to] = bytes.concat(_tokensByOwner[to], tokenIds);\\n    }\\n\\n    /// @dev Add a batch of token Ids given as a bytes array to the sender\\n    /// @param tokenIds bytes a bytes of tokenIds as bytes2 (uint16)\\n    function safeMintBatch(bytes calldata tokenIds) public {\\n        _mintBatch(_msgSender(), tokenIds);\\n        _checkOnERC721Received(\\n            address(0),\\n            _msgSender(),\\n            BytesLib.toUint16(tokenIds, 0),\\n            \\\"\\\"\\n        );\\n    }\\n\\n    /// @dev Approve \\\"to\\\" to manage token Id\\n    /// @param to address The address which will manage the token Id\\n    /// @param tokenId uint256 The token Id to manage\\n    /// @param tokenIndex uint256 The index of the token in the owner's list\\n    function approve(\\n        address to,\\n        uint256 tokenId,\\n        uint256 tokenIndex\\n    ) external {\\n        if (_tokenApprovals[uint16(tokenId)] != _msgSender()) {\\n            // if sender is not approved, they need to be the owner\\n            require(\\n                tokenIndex * 2 < _tokensByOwner[_msgSender()].length,\\n                \\\"ERC721B: token index out of range\\\"\\n            );\\n            require(\\n                BytesLib.toUint16(\\n                    _tokensByOwner[_msgSender()],\\n                    tokenIndex * 2\\n                ) == tokenId,\\n                \\\"ERC721B: caller is neither approved nor owner\\\"\\n            );\\n            emit Approval(_msgSender(), to, tokenId);\\n        }\\n        _tokenApprovals[uint16(tokenId)] = to;\\n    }\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        require(_exists(tokenId), \\\"ERC721B: token does not exist\\\");\\n        return _tokenApprovals[uint16(tokenId)];\\n    }\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     * @param operator The address of the operator to add or remove.\\n     * @param _approved Whether to add or remove `operator` as an operator.\\n     */\\n    function setApprovalForAll(address operator, bool _approved)\\n        external\\n        override\\n    {\\n        require(\\n            operator != _msgSender(),\\n            \\\"ERC721B: cannot approve caller as operator\\\"\\n        );\\n        bytes memory tokens = _tokensByOwner[_msgSender()];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            _tokenApprovals[BytesLib.toUint16(tokens, i)] = _approved\\n                ? operator\\n                : address(0);\\n        }\\n\\n        emit ApprovalForAll(_msgSender(), operator, _approved);\\n    }\\n\\n    /**\\n     * @dev Returns whether `operator` is an approved operator for the caller.\\n     * @param owner The address of the owner to check.\\n     * @param operator The address of the operator to check.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        bytes memory tokens = _tokensByOwner[owner];\\n        for (uint256 i = 0; i < tokens.length; i += 2) {\\n            if (_tokenApprovals[BytesLib.toUint16(tokens, i)] != operator) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @dev Overwrite this function to add some other approval logic, for instance for OpenSea.\\n    function _isApproved(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return getApproved(tokenId) == spender;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////////\\n    // Functions that should not be used but here for compatibility with ERC721\\n    // These are gassy.\\n    ///////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        require(from != address(0), \\\"ERC721B: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721B: to cannot be the zero address\\\");\\n        require(\\n            _isApproved(_msgSender(), tokenId) || from == _msgSender(),\\n            \\\"ERC721B: transfer caller is not owner nor approved\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721B: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        if (_tokensByOwner[from].length == 2) {\\n            // A bit hacky but this is to avoid a useless computation for this gassy implementation\\n            for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n                if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                    break;\\n                }\\n            }\\n            require(\\n                BytesLib.toAddress(owners, fromIndex) == from,\\n                \\\"ERC721B: from is not in owners list\\\"\\n            );\\n        }\\n        _transfer(from, fromIndex, to, tokenIndex);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override {\\n        _safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) external override {\\n        _safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external override {\\n        require(from != address(0), \\\"ERC721B: from cannot be the zero address\\\");\\n        require(to != address(0), \\\"ERC721B: to cannot be the zero address\\\");\\n        require(\\n            _isApproved(_msgSender(), tokenId),\\n            \\\"ERC721B: transfer caller is not owner nor approved\\\"\\n        );\\n        uint256 tokenIndex = 0;\\n        while (\\n            BytesLib.toUint16(_tokensByOwner[from], tokenIndex) != tokenId &&\\n            tokenIndex < _tokensByOwner[from].length\\n        ) {\\n            tokenIndex += 2;\\n        }\\n        require(\\n            tokenIndex < _tokensByOwner[from].length,\\n            \\\"ERC721B: from does not own the token\\\"\\n        );\\n\\n        uint256 fromIndex;\\n        if (_tokensByOwner[from].length == 2) {\\n            // A bit hacky but this is to avoid a useless computation for this gassy implementation\\n            for (fromIndex = 0; fromIndex < owners.length; fromIndex += 20) {\\n                if (BytesLib.toAddress(owners, fromIndex) == from) {\\n                    break;\\n                }\\n            }\\n            require(\\n                BytesLib.toAddress(owners, fromIndex) == from,\\n                \\\"ERC721B: from is not in owners list\\\"\\n            );\\n        }\\n        _transfer(from, fromIndex, to, tokenIndex);\\n    }\\n\\n    /**\\n     * @dev Returns true of owner is the owner of the given token.\\n     *      This is much less gassy than using address == ownerOf(tokenId).\\n     * @param owner address The asserted owner\\n     * @param tokenId uint16 A given token id\\n     * @return bool True if the owner is truly the owner of the token\\n     */\\n    function _isOwnerOf(address owner, uint256 tokenId)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 j = 0; j < _tokensByOwner[owner].length; j += 2) {\\n            if (BytesLib.toUint16(_tokensByOwner[owner], j) == tokenId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev For each owner, we go through all their tokens and check if the sought token is in the list. This lookup\\n     *      is gassy but we do not expect to pay them often as we provide other mean of doing the transfers.\\n     * @param tokenId uint16 A given token id\\n     * @return address The owner of the token, might be 0x0 if not found\\n     */\\n    function _ownerOf(uint256 tokenId) private view returns (address) {\\n        address owner = address(0);\\n        for (uint256 i = 0; i < owners.length; i += 20) {\\n            address currentOwner = BytesLib.toAddress(owners, i);\\n            bool isOwner = _isOwnerOf(currentOwner, tokenId);\\n            if (isOwner) {\\n                owner = currentOwner;\\n                break;\\n            }\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good\\n     *      reason to call this function on chain.\\n     * @param tokenId uint265 A given token id\\n     * @return address The owner of the token.\\n     */\\n    function ownerOf(uint256 tokenId) external view override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721B: owner query for nonexistent token\\\");\\n        return _ownerOf(tokenId);\\n    }\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external override {\\n        address owner = _ownerOf(tokenId);\\n        require(\\n            owner != address(0),\\n            \\\"ERC721B: approve query for nonexistent token\\\"\\n        );\\n        require(\\n            _tokenApprovals[uint16(tokenId)] == _msgSender() ||\\n                owner == _msgSender(),\\n            \\\"ERC721B: caller is not the owner nor an approved operator for the token\\\"\\n        );\\n        _tokenApprovals[uint16(tokenId)] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xc84e1dbd37a1fdd84cb6e2ad370d63c366824b7cffa34a8c5b97b8de12a7cdcb\",\"license\":\"MIT\"},\"contracts/tokens/ERC721BEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC721B} from \\\"./ERC721B.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token optimized for batch minting with enumerable interface\\n * @notice a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n *      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data\\n *      We use the uint16 / bytes2 tokenId\\n */\\ncontract ERC721BEnumerable is ERC721B, IERC721Enumerable {\\n    function totalSupply() external view override returns (uint256) {\\n        uint256 total = 0;\\n        for (uint256 i = 0; i < owners.length; i += 20) {\\n            total += _balanceOf(i);\\n        }\\n        return total;\\n    }\\n\\n    function tokenOfOwnerByIndex(address owner, uint256 index)\\n        external\\n        view\\n        override\\n        returns (uint256 tokenId)\\n    {\\n        require(\\n            index * 2 < _tokensByOwner[owner].length,\\n            \\\"ERC721Enumerable: index out of range\\\"\\n        );\\n        return BytesLib.toUint16(_tokensByOwner[owner], index * 2);\\n    }\\n\\n    function tokenByIndex(uint256 index)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 ownerIndex = 0;\\n        uint256 count;\\n        while (count <= index) {\\n            count += _balanceOf(ownerIndex);\\n            ownerIndex += 20;\\n        }\\n        ownerIndex -= 20;\\n        count -= _balanceOf(ownerIndex);\\n        return\\n            BytesLib.toUint16(\\n                _tokensByOwner[BytesLib.toAddress(owners, ownerIndex)],\\n                (index - count) * 2\\n            );\\n    }\\n\\n    constructor(string memory name_, string memory symbol_)\\n        ERC721B(name_, symbol_)\\n    {}\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(IERC165, ERC721B)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Enumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xae498b256645d41284d626a76f32016edfd56165b5e470b8c7be2b4a1129a0ad\",\"license\":\"MIT\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xf75784dfc94ea43668eb195d5690a1dde1b6eda62017e73a3899721583821d29\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018c5760003560e01c806342842e0e116100e357806395d89b411161008c578063b88d4fde11610066578063b88d4fde14610341578063c87b56dd14610354578063e985e9c51461037557600080fd5b806395d89b41146103115780639913fc6314610319578063a22cb4651461032e57600080fd5b80636352211e116100bd5780636352211e146102d857806370a08231146102eb57806389c8af83146102fe57600080fd5b806342842e0e1461029f5780634f6ccce7146102b257806357fcd8c0146102c557600080fd5b8063095ea7b31161014557806325174f0e1161011f57806325174f0e146102665780632f745c5914610279578063426a84931461028c57600080fd5b8063095ea7b31461022857806318160ddd1461023d57806323b872dd1461025357600080fd5b80630216e304116101765780630216e304146101cc57806306fdde03146101e8578063081812fc146101fd57600080fd5b8062923f9e1461019157806301ffc9a7146101b9575b600080fd5b6101a461019f366004612e60565b610388565b60405190151581526020015b60405180910390f35b6101a46101c7366004612ea7565b6103b3565b6101d561271081565b60405161ffff90911681526020016101b0565b6101f061040f565b6040516101b09190612f1c565b61021061020b366004612e60565b6104a2565b6040516001600160a01b0390911681526020016101b0565b61023b610236366004612f4b565b61051f565b005b6102456106e2565b6040519081526020016101b0565b61023b610261366004612f75565b61072a565b610245610274366004612fb1565b610bba565b610245610287366004612f4b565b610c69565b61023b61029a366004612fcc565b610dce565b61023b6102ad366004612f75565b610f9d565b6102456102c0366004612e60565b610fbd565b61023b6102d3366004612fff565b611178565b6102106102e6366004612e60565b6111e1565b6102456102f9366004612fb1565b611267565b61023b61030c366004613071565b611299565b6101f06114fb565b61032161150b565b6040516101b091906130b5565b61023b61033c3660046130eb565b611568565b61023b61034f36600461313d565b611743565b6101f0610362366004612e60565b5060408051602081019091526000815290565b6101a4610383366004613219565b611755565b600281612710811061039957600080fd5b60209182820401919006915054906101000a900460ff1681565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f780e9d6300000000000000000000000000000000000000000000000000000000148061040957506104098261186b565b92915050565b606061013c805461041f9061324c565b80601f016020809104026020016040519081016040528092919081815260200182805461044b9061324c565b80156104985780601f1061046d57610100808354040283529160200191610498565b820191906000526020600020905b81548152906001019060200180831161047b57829003601f168201915b5050505050905090565b60006104ad8261194e565b6104fe5760405162461bcd60e51b815260206004820152601d60248201527f455243373231423a20746f6b656e20646f6573206e6f7420657869737400000060448201526064015b60405180910390fd5b5061ffff16600090815261013b60205260409020546001600160a01b031690565b600061052a82611980565b90506001600160a01b0381166105a85760405162461bcd60e51b815260206004820152602c60248201527f455243373231423a20617070726f766520717565727920666f72206e6f6e657860448201527f697374656e7420746f6b656e000000000000000000000000000000000000000060648201526084016104f5565b61ffff8216600090815261013b60205260409020546001600160a01b03163314806105db57506001600160a01b03811633145b6106735760405162461bcd60e51b815260206004820152604760248201527f455243373231423a2063616c6c6572206973206e6f7420746865206f776e657260448201527f206e6f7220616e20617070726f766564206f70657261746f7220666f7220746860648201527f6520746f6b656e00000000000000000000000000000000000000000000000000608482015260a4016104f5565b61ffff8216600090815261013b6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600080805b600180546106f49061324c565b905081101561072457610706816119e7565b6107109083613297565b915061071d601482613297565b90506106e7565b50919050565b6001600160a01b0383166107915760405162461bcd60e51b815260206004820152602860248201527f455243373231423a2066726f6d2063616e6e6f7420626520746865207a65726f604482015267206164647265737360c01b60648201526084016104f5565b6001600160a01b0382166107f65760405162461bcd60e51b815260206004820152602660248201527f455243373231423a20746f2063616e6e6f7420626520746865207a65726f206160448201526564647265737360d01b60648201526084016104f5565b6108003382611af3565b6108725760405162461bcd60e51b815260206004820152603260248201527f455243373231423a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016104f5565b60005b6001600160a01b0384166000908152602081905260409020805483916109229161089e9061324c565b80601f01602080910402602001604051908101604052809291908181526020018280546108ca9061324c565b80156109175780601f106108ec57610100808354040283529160200191610917565b820191906000526020600020905b8154815290600101906020018083116108fa57829003601f168201915b505050505083611b19565b61ffff161415801561095757506001600160a01b038416600090815260208190526040902080546109529061324c565b905081105b1561096e57610967600282613297565b9050610875565b6001600160a01b038416600090815260208190526040902080546109919061324c565b90508110610a065760405162461bcd60e51b8152602060048201526024808201527f455243373231423a2066726f6d20646f6573206e6f74206f776e20746865207460448201527f6f6b656e0000000000000000000000000000000000000000000000000000000060648201526084016104f5565b6001600160a01b03841660009081526020819052604081208054610a299061324c565b905060021415610ba7575060005b60018054610a449061324c565b9050811015610b1157846001600160a01b0316610aeb60018054610a679061324c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a939061324c565b8015610ae05780601f10610ab557610100808354040283529160200191610ae0565b820191906000526020600020905b815481529060010190602001808311610ac357829003601f168201915b505050505083611b7f565b6001600160a01b03161415610aff57610b11565b610b0a601482613297565b9050610a37565b846001600160a01b0316610b2b60018054610a679061324c565b6001600160a01b031614610ba75760405162461bcd60e51b815260206004820152602360248201527f455243373231423a2066726f6d206973206e6f7420696e206f776e657273206c60448201527f697374000000000000000000000000000000000000000000000000000000000060648201526084016104f5565b610bb385828685611bf5565b5050505050565b6000805b60018054610bcb9061324c565b9050811015610c2157826001600160a01b0316610bee60018054610a679061324c565b6001600160a01b03161415610c0f57610c086014826132c5565b9392505050565b610c1a601482613297565b9050610bbe565b60405162461bcd60e51b815260206004820152601860248201527f455243373231423a204f776e6572206e6f7420666f756e64000000000000000060448201526064016104f5565b6001600160a01b03821660009081526020819052604081208054610c8c9061324c565b9050610c998360026132d9565b10610d0b5760405162461bcd60e51b8152602060048201526024808201527f455243373231456e756d657261626c653a20696e646578206f7574206f66207260448201527f616e67650000000000000000000000000000000000000000000000000000000060648201526084016104f5565b6001600160a01b03831660009081526020819052604090208054610dc39190610d339061324c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5f9061324c565b8015610dac5780601f10610d8157610100808354040283529160200191610dac565b820191906000526020600020905b815481529060010190602001808311610d8f57829003601f168201915b5050505050836002610dbe91906132d9565b611b19565b61ffff169392505050565b61ffff8216600090815261013b60205260409020546001600160a01b03163314610f5c573360009081526020819052604090208054610e0c9061324c565b9050610e198260026132d9565b10610e8c5760405162461bcd60e51b815260206004820152602160248201527f455243373231423a20746f6b656e20696e646578206f7574206f662072616e6760448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016104f5565b33600090815260208190526040902080548391610eac91610d339061324c565b61ffff1614610f235760405162461bcd60e51b815260206004820152602d60248201527f455243373231423a2063616c6c6572206973206e65697468657220617070726f60448201527f766564206e6f72206f776e65720000000000000000000000000000000000000060648201526084016104f5565b60405182906001600160a01b0385169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590600090a45b5061ffff16600090815261013b60205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610fb8838383604051806020016040528060008152506122d6565b505050565b600080805b838111610ff057610fd2826119e7565b610fdc9082613297565b9050610fe9601483613297565b9150610fc2565b610ffb601483613316565b9150611006826119e7565b6110109082613316565b905061116c6000806110ac600180546110289061324c565b80601f01602080910402602001604051908101604052809291908181526020018280546110549061324c565b80156110a15780601f10611076576101008083540402835291602001916110a1565b820191906000526020600020905b81548152906001019060200180831161108457829003601f168201915b505050505086611b7f565b6001600160a01b03166001600160a01b0316815260200190815260200160002080546110d79061324c565b80601f01602080910402602001604051908101604052809291908181526020018280546111039061324c565b80156111505780601f1061112557610100808354040283529160200191611150565b820191906000526020600020905b81548152906001019060200180831161113357829003601f168201915b505050505082866111619190613316565b610dbe9060026132d9565b61ffff16949350505050565b61118333838361267f565b610fb86000336111c885858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250611b19915050565b61ffff1660405180602001604052806000815250612a13565b60006111ec8261194e565b61125e5760405162461bcd60e51b815260206004820152602a60248201527f455243373231423a206f776e657220717565727920666f72206e6f6e6578697360448201527f74656e7420746f6b656e0000000000000000000000000000000000000000000060648201526084016104f5565b61040982611980565b6001600160a01b038116600090815260208190526040812080546002919061128e9061324c565b6104099291506132c5565b6001600160a01b0384166113005760405162461bcd60e51b815260206004820152602860248201527f455243373231423a2066726f6d2063616e6e6f7420626520746865207a65726f604482015267206164647265737360c01b60648201526084016104f5565b6001600160a01b0382166113655760405162461bcd60e51b815260206004820152602660248201527f455243373231423a20746f2063616e6e6f7420626520746865207a65726f206160448201526564647265737360d01b60648201526084016104f5565b6001600160a01b038416600090815260208190526040902080546002919061138c9061324c565b6113979291506132c5565b811061140b5760405162461bcd60e51b815260206004820152602160248201527f455243373231423a20746f6b656e20696e646578206f7574206f662072616e6760448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016104f5565b6001600160a01b038416600090815260208190526040812080546114339190610d339061324c565b9050611443338261ffff16611af3565b8061145657506001600160a01b03851633145b6114c85760405162461bcd60e51b815260206004820152603260248201527f455243373231423a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016104f5565b6114d485858585611bf5565b6114f385848361ffff1660405180602001604052806000815250612a13565b505050505050565b606061013d805461041f9061324c565b611513612d69565b604080516204e2008101918290529060029061271090826000855b825461010083900a900460ff16151581526020600192830181810494850194909303909202910180841161152e5790505050505050905090565b6001600160a01b0382163314156115e75760405162461bcd60e51b815260206004820152602a60248201527f455243373231423a2063616e6e6f7420617070726f76652063616c6c6572206160448201527f73206f70657261746f720000000000000000000000000000000000000000000060648201526084016104f5565b33600090815260208190526040812080546116019061324c565b80601f016020809104026020016040519081016040528092919081815260200182805461162d9061324c565b801561167a5780601f1061164f5761010080835404028352916020019161167a565b820191906000526020600020905b81548152906001019060200180831161165d57829003601f168201915b5050505050905060005b81518110156116fb578261169957600061169b565b835b61013b60006116aa8585611b19565b61ffff1681526020810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790556116f4600282613297565b9050611684565b5060405182151581526001600160a01b0384169033907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319060200160405180910390a3505050565b61174f848484846122d6565b50505050565b6001600160a01b0382166000908152602081905260408120805482919061177b9061324c565b80601f01602080910402602001604051908101604052809291908181526020018280546117a79061324c565b80156117f45780601f106117c9576101008083540402835291602001916117f4565b820191906000526020600020905b8154815290600101906020018083116117d757829003601f168201915b5050505050905060005b815181101561186057836001600160a01b031661013b60006118208585611b19565b61ffff1681526020810191909152604001600020546001600160a01b03161461184e57600092505050610409565b611859600282613297565b90506117fe565b506001949350505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f80ac58cd0000000000000000000000000000000000000000000000000000000014806118fe57507fffffffff0000000000000000000000000000000000000000000000000000000082167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061040957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610409565b600060028261271081106119645761196461332d565b602081049091015460ff601f9092166101000a90041692915050565b600080805b600180546119929061324c565b90508110156119e05760006119ad60018054610a679061324c565b905060006119bb8287612bb8565b905080156119cb575091506119e0565b506119d99050601482613297565b9050611985565b5092915050565b6000600180546119f69061324c565b9050611a038360146132d9565b10611a505760405162461bcd60e51b815260206004820181905260248201527f455243373231423a206f776e6572496e646578206f7574206f6620626f756e6460448201526064016104f5565b6104096102f960018054611a639061324c565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8f9061324c565b8015611adc5780601f10611ab157610100808354040283529160200191611adc565b820191906000526020600020905b815481529060010190602001808311611abf57829003601f168201915b5050505050846014611aee91906132d9565b611b7f565b6000826001600160a01b0316611b08836104a2565b6001600160a01b0316149392505050565b6000611b26826002613297565b83511015611b765760405162461bcd60e51b815260206004820152601460248201527f746f55696e7431365f6f75744f66426f756e647300000000000000000000000060448201526064016104f5565b50016002015190565b6000611b8c826014613297565b83511015611bdc5760405162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e6473000000000000000000000060448201526064016104f5565b5001602001516c01000000000000000000000000900490565b6001600160a01b03821660009081526020819052604090208054611c189061324c565b15159050611c5d5760018260601b604051602001611c379291906133fb565b60405160208183030381529060405260019080519060200190611c5b929190612d8a565b505b6001600160a01b03841660009081526020819052604081208054611d169190611c859061324c565b80601f0160208091040260200160405190810160405280929190818152602001828054611cb19061324c565b8015611cfe5780601f10611cd357610100808354040283529160200191611cfe565b820191906000526020600020905b815481529060010190602001808311611ce157829003601f168201915b505050505083846002611d119190613297565b612c41565b6001600160a01b0386166000908152602081905260409020805491925090611d3d9061324c565b90506002141561203557846001600160a01b0316611dec60018054611d619061324c565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8d9061324c565b8015611dda5780601f10611daf57610100808354040283529160200191611dda565b820191906000526020600020905b815481529060010190602001808311611dbd57829003601f168201915b5050505050866014611aee91906132d9565b6001600160a01b031614611e685760405162461bcd60e51b815260206004820152602960248201527f455243373231423a207472616e736665722066726f6d2061646472657373206960448201527f7320696e76616c6964000000000000000000000000000000000000000000000060648201526084016104f5565b611f0560018054611e789061324c565b80601f0160208091040260200160405190810160405280929190818152602001828054611ea49061324c565b8015611ef15780601f10611ec657610100808354040283529160200191611ef1565b820191906000526020600020905b815481529060010190602001808311611ed457829003601f168201915b50505050506000866014611d1191906132d9565b611fd960018054611f159061324c565b80601f0160208091040260200160405190810160405280929190818152602001828054611f419061324c565b8015611f8e5780601f10611f6357610100808354040283529160200191611f8e565b820191906000526020600020905b815481529060010190602001808311611f7157829003601f168201915b5050505050866001611fa09190613297565b611fab9060146132d9565b611fb6886001613297565b611fc19060146132d9565b60018054611fce9061324c565b611d11929150613316565b604051602001611fea929190613438565b6040516020818303038152906040526001908051906020019061200e929190612d8a565b506001600160a01b038516600090815260208190526040812061203091612e0e565b61221e565b6001600160a01b038516600090815260208190526040902080546120e3919061205d9061324c565b80601f01602080910402602001604051908101604052809291908181526020018280546120899061324c565b80156120d65780601f106120ab576101008083540402835291602001916120d6565b820191906000526020600020905b8154815290600101906020018083116120b957829003601f168201915b5050505050600084612c41565b6001600160a01b038616600090815260208190526040902080546121d3919061210b9061324c565b80601f01602080910402602001604051908101604052809291908181526020018280546121379061324c565b80156121845780601f1061215957610100808354040283529160200191612184565b820191906000526020600020905b81548152906001019060200180831161216757829003601f168201915b50505050508460026121969190613297565b6001600160a01b0389166000908152602081905260409020805460029188916121be9061324c565b6121c9929150613316565b611d119190613316565b6040516020016121e4929190613438565b60408051601f198184030181529181526001600160a01b03871660009081526020818152919020825161221c93919290910190612d8a565b505b6001600160a01b0383166000908152602081815260409182902091516122479291849101613467565b60408051601f198184030181529181526001600160a01b03851660009081526020818152919020825161227f93919290910190612d8a565b5061228b816000611b19565b61ffff16836001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505050565b6001600160a01b03841661233d5760405162461bcd60e51b815260206004820152602860248201527f455243373231423a2066726f6d2063616e6e6f7420626520746865207a65726f604482015267206164647265737360c01b60648201526084016104f5565b6001600160a01b0383166123a25760405162461bcd60e51b815260206004820152602660248201527f455243373231423a20746f2063616e6e6f7420626520746865207a65726f206160448201526564647265737360d01b60648201526084016104f5565b6123ac3383611af3565b806123bf57506001600160a01b03841633145b6124315760405162461bcd60e51b815260206004820152603260248201527f455243373231423a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016104f5565b60005b6001600160a01b03851660009081526020819052604090208054849161245d9161089e9061324c565b61ffff161415801561249257506001600160a01b0385166000908152602081905260409020805461248d9061324c565b905081105b156124a9576124a2600282613297565b9050612434565b6001600160a01b038516600090815260208190526040902080546124cc9061324c565b905081106125415760405162461bcd60e51b8152602060048201526024808201527f455243373231423a2066726f6d20646f6573206e6f74206f776e20746865207460448201527f6f6b656e0000000000000000000000000000000000000000000000000000000060648201526084016104f5565b6001600160a01b038516600090815260208190526040812080546125649061324c565b90506002141561265e575060005b6001805461257f9061324c565b90508110156125c857856001600160a01b03166125a260018054610a679061324c565b6001600160a01b031614156125b6576125c8565b6125c1601482613297565b9050612572565b856001600160a01b03166125e260018054610a679061324c565b6001600160a01b03161461265e5760405162461bcd60e51b815260206004820152602360248201527f455243373231423a2066726f6d206973206e6f7420696e206f776e657273206c60448201527f697374000000000000000000000000000000000000000000000000000000000060648201526084016104f5565b61266a86828785611bf5565b61267686868686612a13565b50505050505050565b806126f25760405162461bcd60e51b815260206004820152602660248201527f455243373231423a2063616e6e6f74206d696e742077697468206e6f20746f6b60448201527f656e20496473000000000000000000000000000000000000000000000000000060648201526084016104f5565b6126fd600282613483565b156127705760405162461bcd60e51b815260206004820152602b60248201527f455243373231423a20746f6b656e4964732073686f756c64206265206279746560448201527f73206f662075696e74313600000000000000000000000000000000000000000060648201526084016104f5565b6001600160a01b038316600090815260208190526040902080546127939061324c565b151590506127d85760018360601b6040516020016127b29291906133fb565b604051602081830303815290604052600190805190602001906127d6929190612d8a565b505b60005b818110156129af57600261282684848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250869250611b19915050565b61ffff16612710811061283b5761283b61332d565b602081049091015460ff601f9092166101000a9004161561289e5760405162461bcd60e51b815260206004820152601d60248201527f455243373231423a20746f6b656e20616c72656164792065786973747300000060448201526064016104f5565b600160026128e385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250611b19915050565b61ffff1661271081106128f8576128f861332d565b602091828204019190066101000a81548160ff02191690831515021790555061295883838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859250611b19915050565b61ffff16846001600160a01b031660006001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46129a8600282613297565b90506127db565b506001600160a01b0383166000908152602081815260409182902091516129db92918591859101613497565b60408051601f198184030181529181526001600160a01b03851660009081526020818152919020825161174f93919290910190612d8a565b60006001600160a01b0384163b15611860576040517f150b7a020000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063150b7a0290612a709033908990889088906004016134b7565b602060405180830381600087803b158015612a8a57600080fd5b505af1925050508015612aba575060408051601f3d908101601f19168201909252612ab7918101906134f3565b60015b612b6a573d808015612ae8576040519150601f19603f3d011682016040523d82523d6000602084013e612aed565b606091505b508051612b625760405162461bcd60e51b815260206004820152603360248201527f455243373231423a207472616e7366657220746f206e6f6e204552433732315260448201527f6563656976657220696d706c656d656e7465720000000000000000000000000060648201526084016104f5565b805181602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000167f150b7a0200000000000000000000000000000000000000000000000000000000149050949350505050565b6000805b6001600160a01b03841660009081526020819052604090208054612bdf9061324c565b9050811015612c37576001600160a01b038416600090815260208190526040902080548491612c119161089e9061324c565b61ffff161415612c25576001915050610409565b612c30600282613297565b9050612bbc565b5060009392505050565b606081612c4f81601f613297565b1015612c9d5760405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064016104f5565b612ca78284613297565b84511015612cf75760405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e647300000000000000000000000000000060448201526064016104f5565b606082158015612d165760405191506000825260208201604052612d60565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015612d4f578051835260209283019201612d37565b5050858452601f01601f1916604052505b50949350505050565b604051806204e2000160405280612710906020820280368337509192915050565b828054612d969061324c565b90600052602060002090601f016020900481019282612db85760008555612dfe565b82601f10612dd157805160ff1916838001178555612dfe565b82800160010185558215612dfe579182015b82811115612dfe578251825591602001919060010190612de3565b50612e0a929150612e4b565b5090565b508054612e1a9061324c565b6000825580601f10612e2a575050565b601f016020900490600052602060002090810190612e489190612e4b565b50565b5b80821115612e0a5760008155600101612e4c565b600060208284031215612e7257600080fd5b5035919050565b7fffffffff0000000000000000000000000000000000000000000000000000000081168114612e4857600080fd5b600060208284031215612eb957600080fd5b8135610c0881612e79565b60005b83811015612edf578181015183820152602001612ec7565b8381111561174f5750506000910152565b60008151808452612f08816020860160208601612ec4565b601f01601f19169290920160200192915050565b602081526000610c086020830184612ef0565b80356001600160a01b0381168114612f4657600080fd5b919050565b60008060408385031215612f5e57600080fd5b612f6783612f2f565b946020939093013593505050565b600080600060608486031215612f8a57600080fd5b612f9384612f2f565b9250612fa160208501612f2f565b9150604084013590509250925092565b600060208284031215612fc357600080fd5b610c0882612f2f565b600080600060608486031215612fe157600080fd5b612fea84612f2f565b95602085013595506040909401359392505050565b6000806020838503121561301257600080fd5b823567ffffffffffffffff8082111561302a57600080fd5b818501915085601f83011261303e57600080fd5b81358181111561304d57600080fd5b86602082850101111561305f57600080fd5b60209290920196919550909350505050565b6000806000806080858703121561308757600080fd5b61309085612f2f565b9350602085013592506130a560408601612f2f565b9396929550929360600135925050565b6204e2008101818360005b6127108110156130e257815115158352602092830192909101906001016130c0565b50505092915050565b600080604083850312156130fe57600080fd5b61310783612f2f565b91506020830135801515811461311c57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561315357600080fd5b61315c85612f2f565b935061316a60208601612f2f565b925060408501359150606085013567ffffffffffffffff8082111561318e57600080fd5b818701915087601f8301126131a257600080fd5b8135818111156131b4576131b4613127565b604051601f8201601f19908116603f011681019083821181831017156131dc576131dc613127565b816040528281528a60208487010111156131f557600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561322c57600080fd5b61323583612f2f565b915061324360208401612f2f565b90509250929050565b600181811c9082168061326057607f821691505b6020821081141561072457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156132aa576132aa613281565b500190565b634e487b7160e01b600052601260045260246000fd5b6000826132d4576132d46132af565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561331157613311613281565b500290565b60008282101561332857613328613281565b500390565b634e487b7160e01b600052603260045260246000fd5b8054600090600181811c908083168061335d57607f831692505b602080841082141561337f57634e487b7160e01b600052602260045260246000fd5b81801561339357600181146133c2576133ef565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008616895284890196506133ef565b60008881526020902060005b868110156133e75781548b8201529085019083016133ce565b505084890196505b50505050505092915050565b60006134078285613343565b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000009390931683525050601401919050565b6000835161344a818460208801612ec4565b83519083019061345e818360208801612ec4565b01949350505050565b60006134738285613343565b835161345e818360208801612ec4565b600082613492576134926132af565b500690565b60006134a38286613343565b838582376000930192835250909392505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526134e96080830184612ef0565b9695505050505050565b60006020828403121561350557600080fd5b8151610c0881612e7956fea2646970667358221220d924cc4a0cda63ccf3d38a78ac51ce55cd9e432e0c5d9db34cbb7b843001e52864736f6c63430008080033",
  "devdoc": {
    "details": "See https://eips.ethereum.org/EIPS/eip-721      Based on the study for writing indexes and addresses, we use a single mapping for storing all the data      We use the uint16 / bytes2 tokenId",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "approve(address,uint256,uint256)": {
        "details": "Approve \"to\" to manage token Id",
        "params": {
          "to": "address The address which will manage the token Id",
          "tokenId": "uint256 The token Id to manage",
          "tokenIndex": "uint256 The index of the token in the owner's list"
        }
      },
      "balanceOf(address)": {
        "details": "There are two bytes per tokenId",
        "params": {
          "owner": "address The address we retrieve the balance for"
        },
        "returns": {
          "_0": "uint256 The number of tokens owned by the address"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getOwnerIndex(address)": {
        "details": "Returns the index of owner in the internal array of owners. Revert if not found.",
        "params": {
          "owner": "address The address we retrieve the index for"
        },
        "returns": {
          "_0": "uint256 The index of the owner in the internal owners array"
        }
      },
      "getTokenExists()": {
        "details": "Returns the array of bool telling if a token exists or not."
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns whether `operator` is an approved operator for the caller.",
        "params": {
          "operator": "The address of the operator to check.",
          "owner": "The address of the owner to check."
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "This is the public ownerOf, see IERC721. We fail fast with the initial check. There is no good      reason to call this function on chain.",
        "params": {
          "tokenId": "uint265 A given token id"
        },
        "returns": {
          "_0": "address The owner of the token."
        }
      },
      "safeMintBatch(bytes)": {
        "details": "Add a batch of token Ids given as a bytes array to the sender",
        "params": {
          "tokenIds": "bytes a bytes of tokenIds as bytes2 (uint16)"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,uint256,address,uint256)": {
        "details": "Transfer token with minimal computing since all the required data to check is given",
        "params": {
          "from": "address The address which you want to transfer the token from",
          "fromIndex": "uint256 The index of \"from\" in the owners bytes. This is to avoid a search in the array.",
          "to": "address The address which you want to transfer the token to",
          "tokenIndex": "uint256 The index of the token to transfer in the from's token list."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.",
        "params": {
          "_approved": "Whether to add or remove `operator` as an operator.",
          "operator": "The address of the operator to add or remove."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "tokenByIndex(uint256)": {
        "details": "Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "details": "Returns the total amount of tokens stored by the contract."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      }
    },
    "title": "ERC-721 Non-Fungible Token optimized for batch minting with enumerable interface",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "a bytes2 (uint16) is used to store the token id so the collection should be lower than 2^16 = 65536 items",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5747,
        "contract": "contracts/tokens/ERC721BEnumerable.sol:ERC721BEnumerable",
        "label": "_tokensByOwner",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bytes_storage)"
      },
      {
        "astId": 5749,
        "contract": "contracts/tokens/ERC721BEnumerable.sol:ERC721BEnumerable",
        "label": "owners",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes_storage"
      },
      {
        "astId": 5756,
        "contract": "contracts/tokens/ERC721BEnumerable.sol:ERC721BEnumerable",
        "label": "tokenExists",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bool)10000_storage"
      },
      {
        "astId": 5760,
        "contract": "contracts/tokens/ERC721BEnumerable.sol:ERC721BEnumerable",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "315",
        "type": "t_mapping(t_uint16,t_address)"
      },
      {
        "astId": 5762,
        "contract": "contracts/tokens/ERC721BEnumerable.sol:ERC721BEnumerable",
        "label": "_name",
        "offset": 0,
        "slot": "316",
        "type": "t_string_storage"
      },
      {
        "astId": 5764,
        "contract": "contracts/tokens/ERC721BEnumerable.sol:ERC721BEnumerable",
        "label": "_symbol",
        "offset": 0,
        "slot": "317",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bool)10000_storage": {
        "base": "t_bool",
        "encoding": "inplace",
        "label": "bool[10000]",
        "numberOfBytes": "10016"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}